   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"rt_Timer.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	os_tmr,8,4
  20              		.section	.text.rt_tmr_tick,"ax",%progbits
  21              		.align	2
  22              		.global	rt_tmr_tick
  23              		.thumb
  24              		.thumb_func
  26              	rt_tmr_tick:
  27              	.LFB0:
  28              		.file 1 "../Dave/Generated/src/RTOS001/SRC/rt_Timer.c"
   1:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /*----------------------------------------------------------------------------
   2:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *      RL-ARM - RTX
   3:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *----------------------------------------------------------------------------
   4:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *      Name:    RT_TIMER.C
   5:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *      Purpose: User timer functions
   6:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *      Rev.:    V4.70
   7:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *----------------------------------------------------------------------------
   8:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *
   9:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  10:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * All rights reserved.
  11:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * Redistribution and use in source and binary forms, with or without
  12:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * modification, are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *  - Redistributions of source code must retain the above copyright
  14:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *    notice, this list of conditions and the following disclaimer.
  15:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *  - Redistributions in binary form must reproduce the above copyright
  16:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *    notice, this list of conditions and the following disclaimer in the
  17:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *    documentation and/or other materials provided with the distribution.
  18:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  19:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *    to endorse or promote products derived from this software without 
  20:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *    specific prior written permission.
  21:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *
  22:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  23:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  24:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  26:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  28:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  29:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  30:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  * POSSIBILITY OF SUCH DAMAGE.
  33:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *---------------------------------------------------------------------------*/
  34:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  35:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** #include "rt_TypeDef.h"
  36:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** #include "RTX_Config.h"
  37:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** #include "rt_Timer.h"
  38:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** #include "rt_MemBox.h"
  39:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  40:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  41:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /*----------------------------------------------------------------------------
  42:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *      Global Variables
  43:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *---------------------------------------------------------------------------*/
  44:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  45:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /* User Timer list pointer */
  46:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** struct OS_XTMR os_tmr;
  47:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  48:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /*----------------------------------------------------------------------------
  49:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *      Functions
  50:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****  *---------------------------------------------------------------------------*/
  51:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  52:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /*--------------------------- rt_tmr_tick -----------------------------------*/
  53:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  54:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** void rt_tmr_tick (void) {
  29              		.loc 1 54 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  55:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Decrement delta count of timer list head. Timers having the value of   */
  56:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* zero are removed from the list and the callback function is called.    */
  57:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   P_TMR p;
  58:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  59:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   if (os_tmr.next == NULL) {
  44              		.loc 1 59 0
  45 0006 40F20003 		movw	r3, #:lower16:os_tmr
  46 000a C0F20003 		movt	r3, #:upper16:os_tmr
  47 000e 1B68     		ldr	r3, [r3, #0]
  48 0010 002B     		cmp	r3, #0
  49 0012 3AD0     		beq	.L6
  50              	.L2:
  60:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     return;
  61:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   }
  62:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   os_tmr.tcnt--;
  51              		.loc 1 62 0
  52 0014 40F20003 		movw	r3, #:lower16:os_tmr
  53 0018 C0F20003 		movt	r3, #:upper16:os_tmr
  54 001c 9B88     		ldrh	r3, [r3, #4]
  55 001e 03F1FF33 		add	r3, r3, #-1
  56 0022 9AB2     		uxth	r2, r3
  57 0024 40F20003 		movw	r3, #:lower16:os_tmr
  58 0028 C0F20003 		movt	r3, #:upper16:os_tmr
  59 002c 9A80     		strh	r2, [r3, #4]	@ movhi
  63:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (os_tmr.tcnt == 0 && (p = os_tmr.next) != NULL) {
  60              		.loc 1 63 0
  61 002e 1BE0     		b	.L4
  62              	.L5:
  64:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     /* Call a user provided function to handle an elapsed timer */
  65:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     os_tmr_call (p->info);
  63              		.loc 1 65 0
  64 0030 7B68     		ldr	r3, [r7, #4]
  65 0032 DB88     		ldrh	r3, [r3, #6]
  66 0034 1846     		mov	r0, r3
  67 0036 FFF7FEFF 		bl	os_tmr_call
  66:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     os_tmr.tcnt = p->tcnt;
  68              		.loc 1 66 0
  69 003a 7B68     		ldr	r3, [r7, #4]
  70 003c 9A88     		ldrh	r2, [r3, #4]
  71 003e 40F20003 		movw	r3, #:lower16:os_tmr
  72 0042 C0F20003 		movt	r3, #:upper16:os_tmr
  73 0046 9A80     		strh	r2, [r3, #4]	@ movhi
  67:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     os_tmr.next = p->next;
  74              		.loc 1 67 0
  75 0048 7B68     		ldr	r3, [r7, #4]
  76 004a 1A68     		ldr	r2, [r3, #0]
  77 004c 40F20003 		movw	r3, #:lower16:os_tmr
  78 0050 C0F20003 		movt	r3, #:upper16:os_tmr
  79 0054 1A60     		str	r2, [r3, #0]
  68:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     rt_free_box ((U32 *)m_tmr, p);
  80              		.loc 1 68 0
  81 0056 40F20003 		movw	r3, #:lower16:m_tmr
  82 005a C0F20003 		movt	r3, #:upper16:m_tmr
  83 005e 1B68     		ldr	r3, [r3, #0]
  84 0060 1846     		mov	r0, r3
  85 0062 7968     		ldr	r1, [r7, #4]
  86 0064 FFF7FEFF 		bl	rt_free_box
  87              	.L4:
  63:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (os_tmr.tcnt == 0 && (p = os_tmr.next) != NULL) {
  88              		.loc 1 63 0 discriminator 1
  89 0068 40F20003 		movw	r3, #:lower16:os_tmr
  90 006c C0F20003 		movt	r3, #:upper16:os_tmr
  91 0070 9B88     		ldrh	r3, [r3, #4]
  92 0072 002B     		cmp	r3, #0
  93 0074 0AD1     		bne	.L1
  63:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (os_tmr.tcnt == 0 && (p = os_tmr.next) != NULL) {
  94              		.loc 1 63 0 is_stmt 0 discriminator 2
  95 0076 40F20003 		movw	r3, #:lower16:os_tmr
  96 007a C0F20003 		movt	r3, #:upper16:os_tmr
  97 007e 1B68     		ldr	r3, [r3, #0]
  98 0080 7B60     		str	r3, [r7, #4]
  99 0082 7B68     		ldr	r3, [r7, #4]
 100 0084 002B     		cmp	r3, #0
 101 0086 D3D1     		bne	.L5
 102 0088 00E0     		b	.L1
 103              	.L6:
  60:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     return;
 104              		.loc 1 60 0 is_stmt 1
 105 008a 00BF     		nop
 106              	.L1:
  69:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   }
  70:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** }
 107              		.loc 1 70 0
 108 008c 07F10807 		add	r7, r7, #8
 109 0090 BD46     		mov	sp, r7
 110 0092 80BD     		pop	{r7, pc}
 111              		.cfi_endproc
 112              	.LFE0:
 114              		.section	.text.rt_tmr_create,"ax",%progbits
 115              		.align	2
 116              		.global	rt_tmr_create
 117              		.thumb
 118              		.thumb_func
 120              	rt_tmr_create:
 121              	.LFB1:
  71:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  72:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /*--------------------------- rt_tmr_create ---------------------------------*/
  73:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  74:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** OS_ID rt_tmr_create (U16 tcnt, U16 info)  {
 122              		.loc 1 74 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 24
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              	.LCFI3:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 86B0     		sub	sp, sp, #24
 132              	.LCFI4:
 133              		.cfi_def_cfa_offset 32
 134 0004 00AF     		add	r7, sp, #0
 135              	.LCFI5:
 136              		.cfi_def_cfa_register 7
 137 0006 0246     		mov	r2, r0
 138 0008 0B46     		mov	r3, r1
 139 000a FA80     		strh	r2, [r7, #6]	@ movhi
 140 000c BB80     		strh	r3, [r7, #4]	@ movhi
  75:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Create an user timer and put it into the chained timer list using      */
  76:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* a timeout count value of "tcnt". User parameter "info" is used as a    */
  77:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* parameter for the user provided callback function "os_tmr_call ()".    */
  78:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   P_TMR p_tmr, p;
  79:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   U32 delta,itcnt = tcnt;
 141              		.loc 1 79 0
 142 000e FB88     		ldrh	r3, [r7, #6]
 143 0010 FB60     		str	r3, [r7, #12]
  80:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
  81:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   if (tcnt == 0 || m_tmr == NULL)  {
 144              		.loc 1 81 0
 145 0012 FB88     		ldrh	r3, [r7, #6]
 146 0014 002B     		cmp	r3, #0
 147 0016 06D0     		beq	.L8
 148              		.loc 1 81 0 is_stmt 0 discriminator 1
 149 0018 40F20003 		movw	r3, #:lower16:m_tmr
 150 001c C0F20003 		movt	r3, #:upper16:m_tmr
 151 0020 1B68     		ldr	r3, [r3, #0]
 152 0022 002B     		cmp	r3, #0
 153 0024 02D1     		bne	.L9
 154              	.L8:
  82:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     return (NULL);
 155              		.loc 1 82 0 is_stmt 1
 156 0026 4FF00003 		mov	r3, #0
 157 002a 42E0     		b	.L10
 158              	.L9:
  83:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   }
  84:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p_tmr = rt_alloc_box ((U32 *)m_tmr);
 159              		.loc 1 84 0
 160 002c 40F20003 		movw	r3, #:lower16:m_tmr
 161 0030 C0F20003 		movt	r3, #:upper16:m_tmr
 162 0034 1B68     		ldr	r3, [r3, #0]
 163 0036 1846     		mov	r0, r3
 164 0038 FFF7FEFF 		bl	rt_alloc_box
 165 003c B860     		str	r0, [r7, #8]
  85:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   if (!p_tmr)  {
 166              		.loc 1 85 0
 167 003e BB68     		ldr	r3, [r7, #8]
 168 0040 002B     		cmp	r3, #0
 169 0042 02D1     		bne	.L11
  86:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     return (NULL);
 170              		.loc 1 86 0
 171 0044 4FF00003 		mov	r3, #0
 172 0048 33E0     		b	.L10
 173              	.L11:
  87:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   }
  88:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p_tmr->info = info;
 174              		.loc 1 88 0
 175 004a BB68     		ldr	r3, [r7, #8]
 176 004c BA88     		ldrh	r2, [r7, #4]	@ movhi
 177 004e DA80     		strh	r2, [r3, #6]	@ movhi
  89:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p = (P_TMR)&os_tmr;
 178              		.loc 1 89 0
 179 0050 40F20003 		movw	r3, #:lower16:os_tmr
 180 0054 C0F20003 		movt	r3, #:upper16:os_tmr
 181 0058 7B61     		str	r3, [r7, #20]
  90:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   delta = p->tcnt;
 182              		.loc 1 90 0
 183 005a 7B69     		ldr	r3, [r7, #20]
 184 005c 9B88     		ldrh	r3, [r3, #4]
 185 005e 3B61     		str	r3, [r7, #16]
  91:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (delta < itcnt && p->next != NULL) {
 186              		.loc 1 91 0
 187 0060 07E0     		b	.L12
 188              	.L14:
  92:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     p = p->next;
 189              		.loc 1 92 0
 190 0062 7B69     		ldr	r3, [r7, #20]
 191 0064 1B68     		ldr	r3, [r3, #0]
 192 0066 7B61     		str	r3, [r7, #20]
  93:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     delta += p->tcnt;
 193              		.loc 1 93 0
 194 0068 7B69     		ldr	r3, [r7, #20]
 195 006a 9B88     		ldrh	r3, [r3, #4]
 196 006c 3A69     		ldr	r2, [r7, #16]
 197 006e D318     		adds	r3, r2, r3
 198 0070 3B61     		str	r3, [r7, #16]
 199              	.L12:
  91:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (delta < itcnt && p->next != NULL) {
 200              		.loc 1 91 0 discriminator 1
 201 0072 3A69     		ldr	r2, [r7, #16]
 202 0074 FB68     		ldr	r3, [r7, #12]
 203 0076 9A42     		cmp	r2, r3
 204 0078 03D2     		bcs	.L13
  91:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (delta < itcnt && p->next != NULL) {
 205              		.loc 1 91 0 is_stmt 0 discriminator 2
 206 007a 7B69     		ldr	r3, [r7, #20]
 207 007c 1B68     		ldr	r3, [r3, #0]
 208 007e 002B     		cmp	r3, #0
 209 0080 EFD1     		bne	.L14
 210              	.L13:
  94:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   }
  95:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Right place found, insert timer into the list */
  96:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p_tmr->next = p->next;
 211              		.loc 1 96 0 is_stmt 1
 212 0082 7B69     		ldr	r3, [r7, #20]
 213 0084 1A68     		ldr	r2, [r3, #0]
 214 0086 BB68     		ldr	r3, [r7, #8]
 215 0088 1A60     		str	r2, [r3, #0]
  97:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p_tmr->tcnt = (U16)(delta - itcnt);
 216              		.loc 1 97 0
 217 008a 3B69     		ldr	r3, [r7, #16]
 218 008c 9AB2     		uxth	r2, r3
 219 008e FB68     		ldr	r3, [r7, #12]
 220 0090 9BB2     		uxth	r3, r3
 221 0092 D31A     		subs	r3, r2, r3
 222 0094 9AB2     		uxth	r2, r3
 223 0096 BB68     		ldr	r3, [r7, #8]
 224 0098 9A80     		strh	r2, [r3, #4]	@ movhi
  98:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p->next = p_tmr;
 225              		.loc 1 98 0
 226 009a 7B69     		ldr	r3, [r7, #20]
 227 009c BA68     		ldr	r2, [r7, #8]
 228 009e 1A60     		str	r2, [r3, #0]
  99:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p->tcnt -= p_tmr->tcnt;
 229              		.loc 1 99 0
 230 00a0 7B69     		ldr	r3, [r7, #20]
 231 00a2 9A88     		ldrh	r2, [r3, #4]
 232 00a4 BB68     		ldr	r3, [r7, #8]
 233 00a6 9B88     		ldrh	r3, [r3, #4]
 234 00a8 D31A     		subs	r3, r2, r3
 235 00aa 9AB2     		uxth	r2, r3
 236 00ac 7B69     		ldr	r3, [r7, #20]
 237 00ae 9A80     		strh	r2, [r3, #4]	@ movhi
 100:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   return (p_tmr);
 238              		.loc 1 100 0
 239 00b0 BB68     		ldr	r3, [r7, #8]
 240              	.L10:
 101:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** }
 241              		.loc 1 101 0
 242 00b2 1846     		mov	r0, r3
 243 00b4 07F11807 		add	r7, r7, #24
 244 00b8 BD46     		mov	sp, r7
 245 00ba 80BD     		pop	{r7, pc}
 246              		.cfi_endproc
 247              	.LFE1:
 249              		.section	.text.rt_tmr_kill,"ax",%progbits
 250              		.align	2
 251              		.global	rt_tmr_kill
 252              		.thumb
 253              		.thumb_func
 255              	rt_tmr_kill:
 256              	.LFB2:
 102:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
 103:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** /*--------------------------- rt_tmr_kill -----------------------------------*/
 104:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
 105:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** OS_ID rt_tmr_kill (OS_ID timer)  {
 257              		.loc 1 105 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 16
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261 0000 80B5     		push	{r7, lr}
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 84B0     		sub	sp, sp, #16
 267              	.LCFI7:
 268              		.cfi_def_cfa_offset 24
 269 0004 00AF     		add	r7, sp, #0
 270              	.LCFI8:
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 106:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Remove user timer from the chained timer list. */
 107:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   P_TMR p, p_tmr;
 108:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** 
 109:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p_tmr = (P_TMR)timer;
 273              		.loc 1 109 0
 274 0008 7B68     		ldr	r3, [r7, #4]
 275 000a BB60     		str	r3, [r7, #8]
 110:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p = (P_TMR)&os_tmr;
 276              		.loc 1 110 0
 277 000c 40F20003 		movw	r3, #:lower16:os_tmr
 278 0010 C0F20003 		movt	r3, #:upper16:os_tmr
 279 0014 FB60     		str	r3, [r7, #12]
 111:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Search timer list for requested timer */
 112:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (p->next != p_tmr)  {
 280              		.loc 1 112 0
 281 0016 08E0     		b	.L16
 282              	.L19:
 113:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     if (p->next == NULL) {
 283              		.loc 1 113 0
 284 0018 FB68     		ldr	r3, [r7, #12]
 285 001a 1B68     		ldr	r3, [r3, #0]
 286 001c 002B     		cmp	r3, #0
 287 001e 01D1     		bne	.L17
 114:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****       /* Failed, "timer" is not in the timer list */
 115:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****       return (p_tmr);
 288              		.loc 1 115 0
 289 0020 BB68     		ldr	r3, [r7, #8]
 290 0022 1EE0     		b	.L18
 291              	.L17:
 116:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     }
 117:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****     p = p->next;
 292              		.loc 1 117 0
 293 0024 FB68     		ldr	r3, [r7, #12]
 294 0026 1B68     		ldr	r3, [r3, #0]
 295 0028 FB60     		str	r3, [r7, #12]
 296              	.L16:
 112:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   while (p->next != p_tmr)  {
 297              		.loc 1 112 0 discriminator 1
 298 002a FB68     		ldr	r3, [r7, #12]
 299 002c 1A68     		ldr	r2, [r3, #0]
 300 002e BB68     		ldr	r3, [r7, #8]
 301 0030 9A42     		cmp	r2, r3
 302 0032 F1D1     		bne	.L19
 118:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   }
 119:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Timer was found, remove it from the list */
 120:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p->next = p_tmr->next;
 303              		.loc 1 120 0
 304 0034 BB68     		ldr	r3, [r7, #8]
 305 0036 1A68     		ldr	r2, [r3, #0]
 306 0038 FB68     		ldr	r3, [r7, #12]
 307 003a 1A60     		str	r2, [r3, #0]
 121:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   p->tcnt += p_tmr->tcnt;
 308              		.loc 1 121 0
 309 003c FB68     		ldr	r3, [r7, #12]
 310 003e 9A88     		ldrh	r2, [r3, #4]
 311 0040 BB68     		ldr	r3, [r7, #8]
 312 0042 9B88     		ldrh	r3, [r3, #4]
 313 0044 D318     		adds	r3, r2, r3
 314 0046 9AB2     		uxth	r2, r3
 315 0048 FB68     		ldr	r3, [r7, #12]
 316 004a 9A80     		strh	r2, [r3, #4]	@ movhi
 122:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   rt_free_box ((U32 *)m_tmr, p_tmr);
 317              		.loc 1 122 0
 318 004c 40F20003 		movw	r3, #:lower16:m_tmr
 319 0050 C0F20003 		movt	r3, #:upper16:m_tmr
 320 0054 1B68     		ldr	r3, [r3, #0]
 321 0056 1846     		mov	r0, r3
 322 0058 B968     		ldr	r1, [r7, #8]
 323 005a FFF7FEFF 		bl	rt_free_box
 123:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   /* Timer killed */
 124:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c ****   return (NULL);
 324              		.loc 1 124 0
 325 005e 4FF00003 		mov	r3, #0
 326              	.L18:
 125:../Dave/Generated/src/RTOS001/SRC/rt_Timer.c **** }
 327              		.loc 1 125 0
 328 0062 1846     		mov	r0, r3
 329 0064 07F11007 		add	r7, r7, #16
 330 0068 BD46     		mov	sp, r7
 331 006a 80BD     		pop	{r7, pc}
 332              		.cfi_endproc
 333              	.LFE2:
 335              		.text
 336              	.Letext0:
 337              		.file 2 "../Dave/Generated/src/RTOS001/SRC/rt_TypeDef.h"
 338              		.file 3 "../Dave/Generated/src/RTOS001/SRC/RTX_Config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rt_Timer.c
                            *COM*:00000008 os_tmr
C:\Users\LIUDAN~1\AppData\Local\Temp\ccfVracM.s:21     .text.rt_tmr_tick:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccfVracM.s:26     .text.rt_tmr_tick:00000000 rt_tmr_tick
C:\Users\LIUDAN~1\AppData\Local\Temp\ccfVracM.s:115    .text.rt_tmr_create:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccfVracM.s:120    .text.rt_tmr_create:00000000 rt_tmr_create
C:\Users\LIUDAN~1\AppData\Local\Temp\ccfVracM.s:250    .text.rt_tmr_kill:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccfVracM.s:255    .text.rt_tmr_kill:00000000 rt_tmr_kill
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.rt_TypeDef.h.79.db0d61ef3f79bbdae3d134fa36f08304
                           .group:00000000 wm4.RTX_Config.h.42.eb93c57b7f787c25a05db70c41047f1a
                           .group:00000000 wm4.rt_MemBox.h.36.bed0d6bbd95e17b5f9057dfffad2dc95

UNDEFINED SYMBOLS
os_tmr_call
m_tmr
rt_free_box
rt_alloc_box
