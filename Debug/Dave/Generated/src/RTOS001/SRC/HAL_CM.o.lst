   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"HAL_CM.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rt_init_stack,"ax",%progbits
  20              		.align	2
  21              		.global	rt_init_stack
  22              		.thumb
  23              		.thumb_func
  25              	rt_init_stack:
  26              	.LFB8:
  27              		.file 1 "../Dave/Generated/src/RTOS001/SRC/HAL_CM.c"
   1:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** /*----------------------------------------------------------------------------
   2:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *      RL-ARM - RTX
   3:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *----------------------------------------------------------------------------
   4:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *      Name:    HAL_CM.C
   5:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *      Purpose: Hardware Abstraction Layer for Cortex-M
   6:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *      Rev.:    V4.70
   7:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *----------------------------------------------------------------------------
   8:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *
   9:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  10:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * All rights reserved.
  11:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * Redistribution and use in source and binary forms, with or without
  12:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * modification, are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *  - Redistributions of source code must retain the above copyright
  14:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *    notice, this list of conditions and the following disclaimer.
  15:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *  - Redistributions in binary form must reproduce the above copyright
  16:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *    notice, this list of conditions and the following disclaimer in the
  17:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *    documentation and/or other materials provided with the distribution.
  18:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  19:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *    to endorse or promote products derived from this software without 
  20:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *    specific prior written permission.
  21:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *
  22:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  23:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  24:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  26:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  28:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  29:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  30:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  * POSSIBILITY OF SUCH DAMAGE.
  33:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *---------------------------------------------------------------------------*/
  34:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  35:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #include "rt_TypeDef.h"
  36:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #include "RTX_Config.h"
  37:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #include "rt_HAL_CM.h"
  38:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  39:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  40:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** /*----------------------------------------------------------------------------
  41:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *      Global Variables
  42:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *---------------------------------------------------------------------------*/
  43:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  44:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #ifdef DBG_MSG
  45:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** BIT dbg_msg;
  46:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #endif
  47:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  48:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** /*----------------------------------------------------------------------------
  49:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *      Functions
  50:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****  *---------------------------------------------------------------------------*/
  51:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  52:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  53:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** /*--------------------------- rt_init_stack ---------------------------------*/
  54:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  55:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** void rt_init_stack (P_TCB p_TCB, FUNCP task_body) {
  28              		.loc 1 55 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 24
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 87B0     		sub	sp, sp, #28
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7, #0]
  56:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Prepare TCB and saved context for a first time start of a task. */
  57:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   U32 *stk,i,size;
  58:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  59:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Prepare a complete interrupt frame for first task start */
  60:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   size = p_TCB->priv_stack >> 2;
  45              		.loc 1 60 0
  46 000a 7B68     		ldr	r3, [r7, #4]
  47 000c DB8C     		ldrh	r3, [r3, #38]
  48 000e 4FEA9303 		lsr	r3, r3, #2
  49 0012 9BB2     		uxth	r3, r3
  50 0014 FB60     		str	r3, [r7, #12]
  61:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   if (size == 0) {
  51              		.loc 1 61 0
  52 0016 FB68     		ldr	r3, [r7, #12]
  53 0018 002B     		cmp	r3, #0
  54 001a 09D1     		bne	.L2
  62:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     size = (U16)os_stackinfo >> 2;
  55              		.loc 1 62 0
  56 001c 40F20003 		movw	r3, #:lower16:os_stackinfo
  57 0020 C0F20003 		movt	r3, #:upper16:os_stackinfo
  58 0024 1B68     		ldr	r3, [r3, #0]
  59 0026 9BB2     		uxth	r3, r3
  60 0028 4FEA9303 		lsr	r3, r3, #2
  61 002c 9BB2     		uxth	r3, r3
  62 002e FB60     		str	r3, [r7, #12]
  63              	.L2:
  63:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   }
  64:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  65:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Write to the top of stack. */
  66:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   stk = &p_TCB->stack[size];
  64              		.loc 1 66 0
  65 0030 7B68     		ldr	r3, [r7, #4]
  66 0032 DA6A     		ldr	r2, [r3, #44]
  67 0034 FB68     		ldr	r3, [r7, #12]
  68 0036 4FEA8303 		lsl	r3, r3, #2
  69 003a D318     		adds	r3, r2, r3
  70 003c 7B61     		str	r3, [r7, #20]
  67:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  68:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Auto correct to 8-byte ARM stack alignment. */
  69:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   if ((U32)stk & 0x04) {
  71              		.loc 1 69 0
  72 003e 7B69     		ldr	r3, [r7, #20]
  73 0040 03F00403 		and	r3, r3, #4
  74 0044 002B     		cmp	r3, #0
  75 0046 03D0     		beq	.L3
  70:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     stk--;
  76              		.loc 1 70 0
  77 0048 7B69     		ldr	r3, [r7, #20]
  78 004a A3F10403 		sub	r3, r3, #4
  79 004e 7B61     		str	r3, [r7, #20]
  80              	.L3:
  71:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   }
  72:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  73:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   stk -= 16;
  81              		.loc 1 73 0
  82 0050 7B69     		ldr	r3, [r7, #20]
  83 0052 A3F14003 		sub	r3, r3, #64
  84 0056 7B61     		str	r3, [r7, #20]
  74:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  75:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Default xPSR and initial PC */
  76:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   stk[15] = INITIAL_xPSR;
  85              		.loc 1 76 0
  86 0058 7B69     		ldr	r3, [r7, #20]
  87 005a 03F13C03 		add	r3, r3, #60
  88 005e 4FF08072 		mov	r2, #16777216
  89 0062 1A60     		str	r2, [r3, #0]
  77:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   stk[14] = (U32)task_body;
  90              		.loc 1 77 0
  91 0064 7B69     		ldr	r3, [r7, #20]
  92 0066 03F13803 		add	r3, r3, #56
  93 006a 3A68     		ldr	r2, [r7, #0]
  94 006c 1A60     		str	r2, [r3, #0]
  78:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  79:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Clear R4-R11,R0-R3,R12,LR registers. */
  80:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   for (i = 0; i < 14; i++) {
  95              		.loc 1 80 0
  96 006e 4FF00003 		mov	r3, #0
  97 0072 3B61     		str	r3, [r7, #16]
  98 0074 0BE0     		b	.L4
  99              	.L5:
  81:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     stk[i] = 0;
 100              		.loc 1 81 0 discriminator 2
 101 0076 3B69     		ldr	r3, [r7, #16]
 102 0078 4FEA8303 		lsl	r3, r3, #2
 103 007c 7A69     		ldr	r2, [r7, #20]
 104 007e D318     		adds	r3, r2, r3
 105 0080 4FF00002 		mov	r2, #0
 106 0084 1A60     		str	r2, [r3, #0]
  80:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   for (i = 0; i < 14; i++) {
 107              		.loc 1 80 0 discriminator 2
 108 0086 3B69     		ldr	r3, [r7, #16]
 109 0088 03F10103 		add	r3, r3, #1
 110 008c 3B61     		str	r3, [r7, #16]
 111              	.L4:
  80:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   for (i = 0; i < 14; i++) {
 112              		.loc 1 80 0 is_stmt 0 discriminator 1
 113 008e 3B69     		ldr	r3, [r7, #16]
 114 0090 0D2B     		cmp	r3, #13
 115 0092 F0D9     		bls	.L5
  82:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   }
  83:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  84:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Assign a void pointer to R0. */
  85:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   stk[8] = (U32)p_TCB->msg;
 116              		.loc 1 85 0 is_stmt 1
 117 0094 7B69     		ldr	r3, [r7, #20]
 118 0096 03F12003 		add	r3, r3, #32
 119 009a 7A68     		ldr	r2, [r7, #4]
 120 009c D269     		ldr	r2, [r2, #28]
 121 009e 1A60     		str	r2, [r3, #0]
  86:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  87:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Initial Task stack pointer. */
  88:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   p_TCB->tsk_stack = (U32)stk;
 122              		.loc 1 88 0
 123 00a0 7A69     		ldr	r2, [r7, #20]
 124 00a2 7B68     		ldr	r3, [r7, #4]
 125 00a4 9A62     		str	r2, [r3, #40]
  89:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  90:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Task entry point. */
  91:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   p_TCB->ptask = task_body;
 126              		.loc 1 91 0
 127 00a6 7B68     		ldr	r3, [r7, #4]
 128 00a8 3A68     		ldr	r2, [r7, #0]
 129 00aa 1A63     		str	r2, [r3, #48]
  92:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  93:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Set a magic word for checking of stack overflow. */
  94:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   p_TCB->stack[0] = MAGIC_WORD;
 130              		.loc 1 94 0
 131 00ac 7B68     		ldr	r3, [r7, #4]
 132 00ae DA6A     		ldr	r2, [r3, #44]
 133 00b0 42F6A563 		movw	r3, #11941
 134 00b4 CEF25A23 		movt	r3, 57946
 135 00b8 1360     		str	r3, [r2, #0]
  95:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** }
 136              		.loc 1 95 0
 137 00ba 07F11C07 		add	r7, r7, #28
 138 00be BD46     		mov	sp, r7
 139 00c0 80BC     		pop	{r7}
 140 00c2 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE8:
 144              		.section	.text.rt_ret_regs,"ax",%progbits
 145              		.align	2
 146              		.thumb
 147              		.thumb_func
 149              	rt_ret_regs:
 150              	.LFB9:
  96:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  97:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
  98:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** /*--------------------------- rt_ret_val ----------------------------------*/
  99:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
 100:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** static __inline U32 *rt_ret_regs (P_TCB p_TCB) {
 151              		.loc 1 100 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 8
 154              		@ frame_needed = 1, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156 0000 80B4     		push	{r7}
 157              	.LCFI3:
 158              		.cfi_def_cfa_offset 4
 159              		.cfi_offset 7, -4
 160 0002 83B0     		sub	sp, sp, #12
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 16
 163 0004 00AF     		add	r7, sp, #0
 164              	.LCFI5:
 165              		.cfi_def_cfa_register 7
 166 0006 7860     		str	r0, [r7, #4]
 101:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Get pointer to task return value registers (R0..R3) in Stack */
 102:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #if (__TARGET_FPU_VFP)
 103:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   if (p_TCB->stack_frame) {
 167              		.loc 1 103 0
 168 0008 7B68     		ldr	r3, [r7, #4]
 169 000a 93F82530 		ldrb	r3, [r3, #37]	@ zero_extendqisi2
 170 000e 002B     		cmp	r3, #0
 171 0010 04D0     		beq	.L7
 104:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     /* Extended Stack Frame: R4-R11,S16-S31,R0-R3,R12,LR,PC,xPSR,S0-S15,FPSCR */
 105:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     return (U32 *)(p_TCB->tsk_stack + 8*4 + 16*4);
 172              		.loc 1 105 0
 173 0012 7B68     		ldr	r3, [r7, #4]
 174 0014 9B6A     		ldr	r3, [r3, #40]
 175 0016 03F16003 		add	r3, r3, #96
 176 001a 03E0     		b	.L8
 177              	.L7:
 106:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   } else {
 107:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     /* Basic Stack Frame: R4-R11,R0-R3,R12,LR,PC,xPSR */
 108:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****     return (U32 *)(p_TCB->tsk_stack + 8*4);
 178              		.loc 1 108 0
 179 001c 7B68     		ldr	r3, [r7, #4]
 180 001e 9B6A     		ldr	r3, [r3, #40]
 181 0020 03F12003 		add	r3, r3, #32
 182              	.L8:
 109:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   }
 110:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #else
 111:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   /* Stack Frame: R4-R11,R0-R3,R12,LR,PC,xPSR */
 112:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   return (U32 *)(p_TCB->tsk_stack + 8*4);
 113:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** #endif
 114:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** }
 183              		.loc 1 114 0
 184 0024 1846     		mov	r0, r3
 185 0026 07F10C07 		add	r7, r7, #12
 186 002a BD46     		mov	sp, r7
 187 002c 80BC     		pop	{r7}
 188 002e 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE9:
 192              		.section	.text.rt_ret_val,"ax",%progbits
 193              		.align	2
 194              		.global	rt_ret_val
 195              		.thumb
 196              		.thumb_func
 198              	rt_ret_val:
 199              	.LFB10:
 115:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
 116:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** void rt_ret_val (P_TCB p_TCB, U32 v0) {
 200              		.loc 1 116 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 16
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204 0000 80B5     		push	{r7, lr}
 205              	.LCFI6:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 84B0     		sub	sp, sp, #16
 210              	.LCFI7:
 211              		.cfi_def_cfa_offset 24
 212 0004 00AF     		add	r7, sp, #0
 213              	.LCFI8:
 214              		.cfi_def_cfa_register 7
 215 0006 7860     		str	r0, [r7, #4]
 216 0008 3960     		str	r1, [r7, #0]
 117:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   U32 *ret;
 118:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
 119:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   ret = rt_ret_regs(p_TCB);
 217              		.loc 1 119 0
 218 000a 7868     		ldr	r0, [r7, #4]
 219 000c FFF7FEFF 		bl	rt_ret_regs
 220 0010 F860     		str	r0, [r7, #12]
 120:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   ret[0] = v0;
 221              		.loc 1 120 0
 222 0012 FB68     		ldr	r3, [r7, #12]
 223 0014 3A68     		ldr	r2, [r7, #0]
 224 0016 1A60     		str	r2, [r3, #0]
 121:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** }
 225              		.loc 1 121 0
 226 0018 07F11007 		add	r7, r7, #16
 227 001c BD46     		mov	sp, r7
 228 001e 80BD     		pop	{r7, pc}
 229              		.cfi_endproc
 230              	.LFE10:
 232              		.section	.text.rt_ret_val2,"ax",%progbits
 233              		.align	2
 234              		.global	rt_ret_val2
 235              		.thumb
 236              		.thumb_func
 238              	rt_ret_val2:
 239              	.LFB11:
 122:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
 123:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** void rt_ret_val2(P_TCB p_TCB, U32 v0, U32 v1) {
 240              		.loc 1 123 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 24
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 0000 80B5     		push	{r7, lr}
 245              	.LCFI9:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 86B0     		sub	sp, sp, #24
 250              	.LCFI10:
 251              		.cfi_def_cfa_offset 32
 252 0004 00AF     		add	r7, sp, #0
 253              	.LCFI11:
 254              		.cfi_def_cfa_register 7
 255 0006 F860     		str	r0, [r7, #12]
 256 0008 B960     		str	r1, [r7, #8]
 257 000a 7A60     		str	r2, [r7, #4]
 124:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   U32 *ret;
 125:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** 
 126:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   ret = rt_ret_regs(p_TCB);
 258              		.loc 1 126 0
 259 000c F868     		ldr	r0, [r7, #12]
 260 000e FFF7FEFF 		bl	rt_ret_regs
 261 0012 7861     		str	r0, [r7, #20]
 127:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   ret[0] = v0;
 262              		.loc 1 127 0
 263 0014 7B69     		ldr	r3, [r7, #20]
 264 0016 BA68     		ldr	r2, [r7, #8]
 265 0018 1A60     		str	r2, [r3, #0]
 128:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c ****   ret[1] = v1;
 266              		.loc 1 128 0
 267 001a 7B69     		ldr	r3, [r7, #20]
 268 001c 03F10403 		add	r3, r3, #4
 269 0020 7A68     		ldr	r2, [r7, #4]
 270 0022 1A60     		str	r2, [r3, #0]
 129:../Dave/Generated/src/RTOS001/SRC/HAL_CM.c **** }
 271              		.loc 1 129 0
 272 0024 07F11807 		add	r7, r7, #24
 273 0028 BD46     		mov	sp, r7
 274 002a 80BD     		pop	{r7, pc}
 275              		.cfi_endproc
 276              	.LFE11:
 278              		.text
 279              	.Letext0:
 280              		.file 2 "../Dave/Generated/src/RTOS001/SRC/rt_TypeDef.h"
 281              		.file 3 "../Dave/Generated/src/RTOS001/SRC/RTX_Config.h"
DEFINED SYMBOLS
                            *ABS*:00000000 HAL_CM.c
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:20     .text.rt_init_stack:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:25     .text.rt_init_stack:00000000 rt_init_stack
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:145    .text.rt_ret_regs:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:149    .text.rt_ret_regs:00000000 rt_ret_regs
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:193    .text.rt_ret_val:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:198    .text.rt_ret_val:00000000 rt_ret_val
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:233    .text.rt_ret_val2:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccXVJt6G.s:238    .text.rt_ret_val2:00000000 rt_ret_val2
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.rt_TypeDef.h.79.db0d61ef3f79bbdae3d134fa36f08304
                           .group:00000000 wm4.RTX_Config.h.42.eb93c57b7f787c25a05db70c41047f1a
                           .group:00000000 wm4.rt_HAL_CM.h.36.531af519683d77df9d264c8d6c8a6b22

UNDEFINED SYMBOLS
os_stackinfo
