   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"rt_Semaphore.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rt_sem_init,"ax",%progbits
  20              		.align	2
  21              		.global	rt_sem_init
  22              		.thumb
  23              		.thumb_func
  25              	rt_sem_init:
  26              	.LFB8:
  27              		.file 1 "../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c"
   1:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*----------------------------------------------------------------------------
   2:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *      RL-ARM - RTX
   3:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *----------------------------------------------------------------------------
   4:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *      Name:    RT_SEMAPHORE.C
   5:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *      Purpose: Implements binary and counting semaphores
   6:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *      Rev.:    V4.70
   7:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *----------------------------------------------------------------------------
   8:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *
   9:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  10:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * All rights reserved.
  11:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * Redistribution and use in source and binary forms, with or without
  12:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * modification, are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *  - Redistributions of source code must retain the above copyright
  14:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *    notice, this list of conditions and the following disclaimer.
  15:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *  - Redistributions in binary form must reproduce the above copyright
  16:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *    notice, this list of conditions and the following disclaimer in the
  17:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *    documentation and/or other materials provided with the distribution.
  18:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  19:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *    to endorse or promote products derived from this software without 
  20:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *    specific prior written permission.
  21:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *
  22:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  23:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  24:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  26:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  28:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  29:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  30:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  * POSSIBILITY OF SUCH DAMAGE.
  33:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *---------------------------------------------------------------------------*/
  34:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  35:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "rt_TypeDef.h"
  36:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "RTX_Config.h"
  37:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "rt_System.h"
  38:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "rt_List.h"
  39:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "rt_Task.h"
  40:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "rt_Semaphore.h"
  41:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #include "rt_HAL_CM.h"
  42:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  43:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  44:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*----------------------------------------------------------------------------
  45:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *      Functions
  46:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****  *---------------------------------------------------------------------------*/
  47:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  48:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  49:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*--------------------------- rt_sem_init -----------------------------------*/
  50:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  51:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** void rt_sem_init (OS_ID semaphore, U16 token_count) {
  28              		.loc 1 51 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 85B0     		sub	sp, sp, #20
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 0B46     		mov	r3, r1
  45 000a 7B80     		strh	r3, [r7, #2]	@ movhi
  52:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* Initialize a semaphore */
  53:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_SCB p_SCB = semaphore;
  46              		.loc 1 53 0
  47 000c 7B68     		ldr	r3, [r7, #4]
  48 000e FB60     		str	r3, [r7, #12]
  54:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  55:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   p_SCB->cb_type = SCB;
  49              		.loc 1 55 0
  50 0010 FB68     		ldr	r3, [r7, #12]
  51 0012 4FF00202 		mov	r2, #2
  52 0016 1A70     		strb	r2, [r3, #0]
  56:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   p_SCB->p_lnk  = NULL;
  53              		.loc 1 56 0
  54 0018 FB68     		ldr	r3, [r7, #12]
  55 001a 4FF00002 		mov	r2, #0
  56 001e 5A60     		str	r2, [r3, #4]
  57:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   p_SCB->tokens = token_count;
  57              		.loc 1 57 0
  58 0020 FB68     		ldr	r3, [r7, #12]
  59 0022 7A88     		ldrh	r2, [r7, #2]	@ movhi
  60 0024 5A80     		strh	r2, [r3, #2]	@ movhi
  58:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** }
  61              		.loc 1 58 0
  62 0026 07F11407 		add	r7, r7, #20
  63 002a BD46     		mov	sp, r7
  64 002c 80BC     		pop	{r7}
  65 002e 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE8:
  69              		.section	.text.rt_sem_delete,"ax",%progbits
  70              		.align	2
  71              		.global	rt_sem_delete
  72              		.thumb
  73              		.thumb_func
  75              	rt_sem_delete:
  76              	.LFB9:
  59:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  60:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  61:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*--------------------------- rt_sem_delete ---------------------------------*/
  62:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  63:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #ifdef __CMSIS_RTOS
  64:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** OS_RESULT rt_sem_delete (OS_ID semaphore) {
  77              		.loc 1 64 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 16
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81 0000 80B5     		push	{r7, lr}
  82              	.LCFI3:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 84B0     		sub	sp, sp, #16
  87              	.LCFI4:
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              	.LCFI5:
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
  65:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* Delete semaphore */
  66:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_SCB p_SCB = semaphore;
  93              		.loc 1 66 0
  94 0008 7B68     		ldr	r3, [r7, #4]
  95 000a FB60     		str	r3, [r7, #12]
  67:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_TCB p_TCB;
  68:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  69:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   while (p_SCB->p_lnk != NULL) {
  96              		.loc 1 69 0
  97 000c 16E0     		b	.L3
  98              	.L4:
  70:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     /* A task is waiting for token */
  71:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_TCB = rt_get_first ((P_XCB)p_SCB);
  99              		.loc 1 71 0
 100 000e F868     		ldr	r0, [r7, #12]
 101 0010 FFF7FEFF 		bl	rt_get_first
 102 0014 B860     		str	r0, [r7, #8]
  72:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_ret_val(p_TCB, 0);
 103              		.loc 1 72 0
 104 0016 B868     		ldr	r0, [r7, #8]
 105 0018 4FF00001 		mov	r1, #0
 106 001c FFF7FEFF 		bl	rt_ret_val
  73:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_rmv_dly(p_TCB);
 107              		.loc 1 73 0
 108 0020 B868     		ldr	r0, [r7, #8]
 109 0022 FFF7FEFF 		bl	rt_rmv_dly
  74:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_TCB->state = READY;
 110              		.loc 1 74 0
 111 0026 BB68     		ldr	r3, [r7, #8]
 112 0028 4FF00102 		mov	r2, #1
 113 002c 5A70     		strb	r2, [r3, #1]
  75:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_put_prio (&os_rdy, p_TCB);
 114              		.loc 1 75 0
 115 002e 40F20000 		movw	r0, #:lower16:os_rdy
 116 0032 C0F20000 		movt	r0, #:upper16:os_rdy
 117 0036 B968     		ldr	r1, [r7, #8]
 118 0038 FFF7FEFF 		bl	rt_put_prio
 119              	.L3:
  69:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   while (p_SCB->p_lnk != NULL) {
 120              		.loc 1 69 0 discriminator 1
 121 003c FB68     		ldr	r3, [r7, #12]
 122 003e 5B68     		ldr	r3, [r3, #4]
 123 0040 002B     		cmp	r3, #0
 124 0042 E4D1     		bne	.L4
  76:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
  77:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  78:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   if (os_rdy.p_lnk && (os_rdy.p_lnk->prio > os_tsk.run->prio)) {
 125              		.loc 1 78 0
 126 0044 40F20003 		movw	r3, #:lower16:os_rdy
 127 0048 C0F20003 		movt	r3, #:upper16:os_rdy
 128 004c 5B68     		ldr	r3, [r3, #4]
 129 004e 002B     		cmp	r3, #0
 130 0050 25D0     		beq	.L5
 131              		.loc 1 78 0 is_stmt 0 discriminator 1
 132 0052 40F20003 		movw	r3, #:lower16:os_rdy
 133 0056 C0F20003 		movt	r3, #:upper16:os_rdy
 134 005a 5B68     		ldr	r3, [r3, #4]
 135 005c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 136 005e 40F20003 		movw	r3, #:lower16:os_tsk
 137 0062 C0F20003 		movt	r3, #:upper16:os_tsk
 138 0066 1B68     		ldr	r3, [r3, #0]
 139 0068 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 140 006a 9A42     		cmp	r2, r3
 141 006c 17D9     		bls	.L5
  79:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     /* preempt running task */
  80:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_put_prio (&os_rdy, os_tsk.run);
 142              		.loc 1 80 0 is_stmt 1
 143 006e 40F20003 		movw	r3, #:lower16:os_tsk
 144 0072 C0F20003 		movt	r3, #:upper16:os_tsk
 145 0076 1B68     		ldr	r3, [r3, #0]
 146 0078 40F20000 		movw	r0, #:lower16:os_rdy
 147 007c C0F20000 		movt	r0, #:upper16:os_rdy
 148 0080 1946     		mov	r1, r3
 149 0082 FFF7FEFF 		bl	rt_put_prio
  81:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     os_tsk.run->state = READY;
 150              		.loc 1 81 0
 151 0086 40F20003 		movw	r3, #:lower16:os_tsk
 152 008a C0F20003 		movt	r3, #:upper16:os_tsk
 153 008e 1B68     		ldr	r3, [r3, #0]
 154 0090 4FF00102 		mov	r2, #1
 155 0094 5A70     		strb	r2, [r3, #1]
  82:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_dispatch (NULL);
 156              		.loc 1 82 0
 157 0096 4FF00000 		mov	r0, #0
 158 009a FFF7FEFF 		bl	rt_dispatch
 159              	.L5:
  83:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
  84:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  85:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   p_SCB->cb_type = 0;
 160              		.loc 1 85 0
 161 009e FB68     		ldr	r3, [r7, #12]
 162 00a0 4FF00002 		mov	r2, #0
 163 00a4 1A70     		strb	r2, [r3, #0]
  86:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  87:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   return (OS_R_OK);
 164              		.loc 1 87 0
 165 00a6 4FF00003 		mov	r3, #0
  88:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** }
 166              		.loc 1 88 0
 167 00aa 1846     		mov	r0, r3
 168 00ac 07F11007 		add	r7, r7, #16
 169 00b0 BD46     		mov	sp, r7
 170 00b2 80BD     		pop	{r7, pc}
 171              		.cfi_endproc
 172              	.LFE9:
 174              		.section	.text.rt_sem_send,"ax",%progbits
 175              		.align	2
 176              		.global	rt_sem_send
 177              		.thumb
 178              		.thumb_func
 180              	rt_sem_send:
 181              	.LFB10:
  89:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #endif
  90:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  91:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  92:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*--------------------------- rt_sem_send -----------------------------------*/
  93:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  94:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** OS_RESULT rt_sem_send (OS_ID semaphore) {
 182              		.loc 1 94 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 16
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186 0000 80B5     		push	{r7, lr}
 187              	.LCFI6:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 7, -8
 190              		.cfi_offset 14, -4
 191 0002 84B0     		sub	sp, sp, #16
 192              	.LCFI7:
 193              		.cfi_def_cfa_offset 24
 194 0004 00AF     		add	r7, sp, #0
 195              	.LCFI8:
 196              		.cfi_def_cfa_register 7
 197 0006 7860     		str	r0, [r7, #4]
  95:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* Return a token to semaphore */
  96:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_SCB p_SCB = semaphore;
 198              		.loc 1 96 0
 199 0008 7B68     		ldr	r3, [r7, #4]
 200 000a FB60     		str	r3, [r7, #12]
  97:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_TCB p_TCB;
  98:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
  99:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   if (p_SCB->p_lnk != NULL) {
 201              		.loc 1 99 0
 202 000c FB68     		ldr	r3, [r7, #12]
 203 000e 5B68     		ldr	r3, [r3, #4]
 204 0010 002B     		cmp	r3, #0
 205 0012 0FD0     		beq	.L8
 100:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     /* A task is waiting for token */
 101:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_TCB = rt_get_first ((P_XCB)p_SCB);
 206              		.loc 1 101 0
 207 0014 F868     		ldr	r0, [r7, #12]
 208 0016 FFF7FEFF 		bl	rt_get_first
 209 001a B860     		str	r0, [r7, #8]
 102:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #ifdef __CMSIS_RTOS
 103:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_ret_val(p_TCB, 1);
 210              		.loc 1 103 0
 211 001c B868     		ldr	r0, [r7, #8]
 212 001e 4FF00101 		mov	r1, #1
 213 0022 FFF7FEFF 		bl	rt_ret_val
 104:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #else
 105:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_ret_val(p_TCB, OS_R_SEM);
 106:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #endif
 107:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_rmv_dly (p_TCB);
 214              		.loc 1 107 0
 215 0026 B868     		ldr	r0, [r7, #8]
 216 0028 FFF7FEFF 		bl	rt_rmv_dly
 108:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_dispatch (p_TCB);
 217              		.loc 1 108 0
 218 002c B868     		ldr	r0, [r7, #8]
 219 002e FFF7FEFF 		bl	rt_dispatch
 220 0032 06E0     		b	.L9
 221              	.L8:
 109:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 110:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   else {
 111:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     /* Store token. */
 112:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_SCB->tokens++;
 222              		.loc 1 112 0
 223 0034 FB68     		ldr	r3, [r7, #12]
 224 0036 5B88     		ldrh	r3, [r3, #2]
 225 0038 03F10103 		add	r3, r3, #1
 226 003c 9AB2     		uxth	r2, r3
 227 003e FB68     		ldr	r3, [r7, #12]
 228 0040 5A80     		strh	r2, [r3, #2]	@ movhi
 229              	.L9:
 113:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 114:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   return (OS_R_OK);
 230              		.loc 1 114 0
 231 0042 4FF00003 		mov	r3, #0
 115:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** }
 232              		.loc 1 115 0
 233 0046 1846     		mov	r0, r3
 234 0048 07F11007 		add	r7, r7, #16
 235 004c BD46     		mov	sp, r7
 236 004e 80BD     		pop	{r7, pc}
 237              		.cfi_endproc
 238              	.LFE10:
 240              		.section	.text.rt_sem_wait,"ax",%progbits
 241              		.align	2
 242              		.global	rt_sem_wait
 243              		.thumb
 244              		.thumb_func
 246              	rt_sem_wait:
 247              	.LFB11:
 116:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 117:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 118:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*--------------------------- rt_sem_wait -----------------------------------*/
 119:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 120:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout) {
 248              		.loc 1 120 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 16
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 0000 80B5     		push	{r7, lr}
 253              	.LCFI9:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257 0002 84B0     		sub	sp, sp, #16
 258              	.LCFI10:
 259              		.cfi_def_cfa_offset 24
 260 0004 00AF     		add	r7, sp, #0
 261              	.LCFI11:
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 264 0008 0B46     		mov	r3, r1
 265 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 121:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* Obtain a token; possibly wait for it */
 122:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_SCB p_SCB = semaphore;
 266              		.loc 1 122 0
 267 000c 7B68     		ldr	r3, [r7, #4]
 268 000e FB60     		str	r3, [r7, #12]
 123:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 124:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   if (p_SCB->tokens) {
 269              		.loc 1 124 0
 270 0010 FB68     		ldr	r3, [r7, #12]
 271 0012 5B88     		ldrh	r3, [r3, #2]
 272 0014 002B     		cmp	r3, #0
 273 0016 09D0     		beq	.L12
 125:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_SCB->tokens--;
 274              		.loc 1 125 0
 275 0018 FB68     		ldr	r3, [r7, #12]
 276 001a 5B88     		ldrh	r3, [r3, #2]
 277 001c 03F1FF33 		add	r3, r3, #-1
 278 0020 9AB2     		uxth	r2, r3
 279 0022 FB68     		ldr	r3, [r7, #12]
 280 0024 5A80     		strh	r2, [r3, #2]	@ movhi
 126:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     return (OS_R_OK);
 281              		.loc 1 126 0
 282 0026 4FF00003 		mov	r3, #0
 283 002a 31E0     		b	.L13
 284              	.L12:
 127:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 128:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* No token available: wait for one */
 129:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   if (timeout == 0) {
 285              		.loc 1 129 0
 286 002c 7B88     		ldrh	r3, [r7, #2]
 287 002e 002B     		cmp	r3, #0
 288 0030 02D1     		bne	.L14
 130:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     return (OS_R_TMO);
 289              		.loc 1 130 0
 290 0032 4FF00103 		mov	r3, #1
 291 0036 2BE0     		b	.L13
 292              	.L14:
 131:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 132:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   if (p_SCB->p_lnk != NULL) {
 293              		.loc 1 132 0
 294 0038 FB68     		ldr	r3, [r7, #12]
 295 003a 5B68     		ldr	r3, [r3, #4]
 296 003c 002B     		cmp	r3, #0
 297 003e 09D0     		beq	.L15
 133:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_put_prio ((P_XCB)p_SCB, os_tsk.run);
 298              		.loc 1 133 0
 299 0040 40F20003 		movw	r3, #:lower16:os_tsk
 300 0044 C0F20003 		movt	r3, #:upper16:os_tsk
 301 0048 1B68     		ldr	r3, [r3, #0]
 302 004a F868     		ldr	r0, [r7, #12]
 303 004c 1946     		mov	r1, r3
 304 004e FFF7FEFF 		bl	rt_put_prio
 305 0052 15E0     		b	.L16
 306              	.L15:
 134:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 135:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   else {
 136:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_SCB->p_lnk = os_tsk.run;
 307              		.loc 1 136 0
 308 0054 40F20003 		movw	r3, #:lower16:os_tsk
 309 0058 C0F20003 		movt	r3, #:upper16:os_tsk
 310 005c 1A68     		ldr	r2, [r3, #0]
 311 005e FB68     		ldr	r3, [r7, #12]
 312 0060 5A60     		str	r2, [r3, #4]
 137:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     os_tsk.run->p_lnk = NULL;
 313              		.loc 1 137 0
 314 0062 40F20003 		movw	r3, #:lower16:os_tsk
 315 0066 C0F20003 		movt	r3, #:upper16:os_tsk
 316 006a 1B68     		ldr	r3, [r3, #0]
 317 006c 4FF00002 		mov	r2, #0
 318 0070 5A60     		str	r2, [r3, #4]
 138:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     os_tsk.run->p_rlnk = (P_TCB)p_SCB;
 319              		.loc 1 138 0
 320 0072 40F20003 		movw	r3, #:lower16:os_tsk
 321 0076 C0F20003 		movt	r3, #:upper16:os_tsk
 322 007a 1B68     		ldr	r3, [r3, #0]
 323 007c FA68     		ldr	r2, [r7, #12]
 324 007e 9A60     		str	r2, [r3, #8]
 325              	.L16:
 139:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 140:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   rt_block(timeout, WAIT_SEM);
 326              		.loc 1 140 0
 327 0080 7B88     		ldrh	r3, [r7, #2]
 328 0082 1846     		mov	r0, r3
 329 0084 4FF00701 		mov	r1, #7
 330 0088 FFF7FEFF 		bl	rt_block
 141:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   return (OS_R_TMO);
 331              		.loc 1 141 0
 332 008c 4FF00103 		mov	r3, #1
 333              	.L13:
 142:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** }
 334              		.loc 1 142 0
 335 0090 1846     		mov	r0, r3
 336 0092 07F11007 		add	r7, r7, #16
 337 0096 BD46     		mov	sp, r7
 338 0098 80BD     		pop	{r7, pc}
 339              		.cfi_endproc
 340              	.LFE11:
 342 009a 00BF     		.section	.text.isr_sem_send,"ax",%progbits
 343              		.align	2
 344              		.global	isr_sem_send
 345              		.thumb
 346              		.thumb_func
 348              	isr_sem_send:
 349              	.LFB12:
 143:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 144:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 145:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*--------------------------- isr_sem_send ----------------------------------*/
 146:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 147:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** void isr_sem_send (OS_ID semaphore) {
 350              		.loc 1 147 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 16
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354 0000 80B5     		push	{r7, lr}
 355              	.LCFI12:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 7, -8
 358              		.cfi_offset 14, -4
 359 0002 84B0     		sub	sp, sp, #16
 360              	.LCFI13:
 361              		.cfi_def_cfa_offset 24
 362 0004 00AF     		add	r7, sp, #0
 363              	.LCFI14:
 364              		.cfi_def_cfa_register 7
 365 0006 7860     		str	r0, [r7, #4]
 148:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* Same function as "os_sem_send", but to be called by ISRs */
 149:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_SCB p_SCB = semaphore;
 366              		.loc 1 149 0
 367 0008 7B68     		ldr	r3, [r7, #4]
 368 000a FB60     		str	r3, [r7, #12]
 150:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 151:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   rt_psq_enq (p_SCB, 0);
 369              		.loc 1 151 0
 370 000c F868     		ldr	r0, [r7, #12]
 371 000e 4FF00001 		mov	r1, #0
 372 0012 FFF7FEFF 		bl	rt_psq_enq
 152:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   rt_psh_req ();
 373              		.loc 1 152 0
 374 0016 FFF7FEFF 		bl	rt_psh_req
 153:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** }
 375              		.loc 1 153 0
 376 001a 07F11007 		add	r7, r7, #16
 377 001e BD46     		mov	sp, r7
 378 0020 80BD     		pop	{r7, pc}
 379              		.cfi_endproc
 380              	.LFE12:
 382 0022 00BF     		.section	.text.rt_sem_psh,"ax",%progbits
 383              		.align	2
 384              		.global	rt_sem_psh
 385              		.thumb
 386              		.thumb_func
 388              	rt_sem_psh:
 389              	.LFB13:
 154:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 155:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 156:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** /*--------------------------- rt_sem_psh ------------------------------------*/
 157:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 158:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** void rt_sem_psh (P_SCB p_CB) {
 390              		.loc 1 158 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 16
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394 0000 80B5     		push	{r7, lr}
 395              	.LCFI15:
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 84B0     		sub	sp, sp, #16
 400              	.LCFI16:
 401              		.cfi_def_cfa_offset 24
 402 0004 00AF     		add	r7, sp, #0
 403              	.LCFI17:
 404              		.cfi_def_cfa_register 7
 405 0006 7860     		str	r0, [r7, #4]
 159:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   /* Check if task has to be waken up */
 160:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   P_TCB p_TCB;
 161:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** 
 162:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   if (p_CB->p_lnk != NULL) {
 406              		.loc 1 162 0
 407 0008 7B68     		ldr	r3, [r7, #4]
 408 000a 5B68     		ldr	r3, [r3, #4]
 409 000c 002B     		cmp	r3, #0
 410 000e 17D0     		beq	.L19
 163:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     /* A task is waiting for token */
 164:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_TCB = rt_get_first ((P_XCB)p_CB);
 411              		.loc 1 164 0
 412 0010 7868     		ldr	r0, [r7, #4]
 413 0012 FFF7FEFF 		bl	rt_get_first
 414 0016 F860     		str	r0, [r7, #12]
 165:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_rmv_dly (p_TCB);
 415              		.loc 1 165 0
 416 0018 F868     		ldr	r0, [r7, #12]
 417 001a FFF7FEFF 		bl	rt_rmv_dly
 166:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_TCB->state   = READY;
 418              		.loc 1 166 0
 419 001e FB68     		ldr	r3, [r7, #12]
 420 0020 4FF00102 		mov	r2, #1
 421 0024 5A70     		strb	r2, [r3, #1]
 167:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #ifdef __CMSIS_RTOS
 168:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_ret_val(p_TCB, 1);
 422              		.loc 1 168 0
 423 0026 F868     		ldr	r0, [r7, #12]
 424 0028 4FF00101 		mov	r1, #1
 425 002c FFF7FEFF 		bl	rt_ret_val
 169:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #else
 170:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_ret_val(p_TCB, OS_R_SEM);
 171:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** #endif
 172:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     rt_put_prio (&os_rdy, p_TCB);
 426              		.loc 1 172 0
 427 0030 40F20000 		movw	r0, #:lower16:os_rdy
 428 0034 C0F20000 		movt	r0, #:upper16:os_rdy
 429 0038 F968     		ldr	r1, [r7, #12]
 430 003a FFF7FEFF 		bl	rt_put_prio
 431 003e 06E0     		b	.L18
 432              	.L19:
 173:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 174:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   else {
 175:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     /* Store token */
 176:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****     p_CB->tokens++;
 433              		.loc 1 176 0
 434 0040 7B68     		ldr	r3, [r7, #4]
 435 0042 5B88     		ldrh	r3, [r3, #2]
 436 0044 03F10103 		add	r3, r3, #1
 437 0048 9AB2     		uxth	r2, r3
 438 004a 7B68     		ldr	r3, [r7, #4]
 439 004c 5A80     		strh	r2, [r3, #2]	@ movhi
 440              	.L18:
 177:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c ****   }
 178:../Dave/Generated/src/RTOS001/SRC/rt_Semaphore.c **** }
 441              		.loc 1 178 0
 442 004e 07F11007 		add	r7, r7, #16
 443 0052 BD46     		mov	sp, r7
 444 0054 80BD     		pop	{r7, pc}
 445              		.cfi_endproc
 446              	.LFE13:
 448 0056 00BF     		.text
 449              	.Letext0:
 450              		.file 2 "../Dave/Generated/src/RTOS001/SRC/rt_TypeDef.h"
 451              		.file 3 "../Dave/Generated/src/RTOS001/SRC/RTX_Config.h"
 452              		.file 4 "../Dave/Generated/src/RTOS001/SRC/rt_List.h"
 453              		.file 5 "../Dave/Generated/src/RTOS001/SRC/rt_Task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rt_Semaphore.c
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:20     .text.rt_sem_init:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:25     .text.rt_sem_init:00000000 rt_sem_init
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:70     .text.rt_sem_delete:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:75     .text.rt_sem_delete:00000000 rt_sem_delete
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:175    .text.rt_sem_send:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:180    .text.rt_sem_send:00000000 rt_sem_send
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:241    .text.rt_sem_wait:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:246    .text.rt_sem_wait:00000000 rt_sem_wait
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:343    .text.isr_sem_send:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:348    .text.isr_sem_send:00000000 isr_sem_send
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:383    .text.rt_sem_psh:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccEC7tCp.s:388    .text.rt_sem_psh:00000000 rt_sem_psh
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.rt_TypeDef.h.79.db0d61ef3f79bbdae3d134fa36f08304
                           .group:00000000 wm4.RTX_Config.h.42.eb93c57b7f787c25a05db70c41047f1a
                           .group:00000000 wm4.rt_List.h.38.eac26046fac8ea42e6920eca3c3ee440
                           .group:00000000 wm4.rt_Task.h.38.ad357e63c89f04311a4b4ec53df91b63
                           .group:00000000 wm4.rt_HAL_CM.h.36.531af519683d77df9d264c8d6c8a6b22

UNDEFINED SYMBOLS
rt_get_first
rt_ret_val
rt_rmv_dly
os_rdy
rt_put_prio
os_tsk
rt_dispatch
rt_block
rt_psq_enq
rt_psh_req
