   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"rt_Memory.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rt_init_mem,"ax",%progbits
  20              		.align	2
  21              		.global	rt_init_mem
  22              		.thumb
  23              		.thumb_func
  25              	rt_init_mem:
  26              	.LFB0:
  27              		.file 1 "../Dave/Generated/src/RTOS001/SRC/rt_Memory.c"
   1:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** /*----------------------------------------------------------------------------
   2:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *      RL-ARM - RTX
   3:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *----------------------------------------------------------------------------
   4:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *      Name:    RT_MEMORY.C
   5:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *      Purpose: Interface functions for Dynamic Memory Management System
   6:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *      Rev.:    V4.70
   7:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *----------------------------------------------------------------------------
   8:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *
   9:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  10:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * All rights reserved.
  11:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * Redistribution and use in source and binary forms, with or without
  12:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * modification, are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *  - Redistributions of source code must retain the above copyright
  14:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *    notice, this list of conditions and the following disclaimer.
  15:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *  - Redistributions in binary form must reproduce the above copyright
  16:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *    notice, this list of conditions and the following disclaimer in the
  17:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *    documentation and/or other materials provided with the distribution.
  18:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  19:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *    to endorse or promote products derived from this software without 
  20:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *    specific prior written permission.
  21:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *
  22:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  23:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  24:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  26:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  28:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  29:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  30:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  * POSSIBILITY OF SUCH DAMAGE.
  33:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****  *---------------------------------------------------------------------------*/
  34:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  35:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** #include "rt_TypeDef.h"
  36:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** #include "rt_Memory.h"
  37:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  38:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  39:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** /* Functions */
  40:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  41:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** // Initialize Dynamic Memory pool
  42:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //   Parameters:
  43:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //     pool:    Pointer to memory pool
  44:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //     size:    Size of memory pool in bytes
  45:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //   Return:    0 - OK, 1 - Error
  46:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  47:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** int rt_init_mem (void *pool, U32 size) {
  28              		.loc 1 47 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 85B0     		sub	sp, sp, #20
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7, #0]
  48:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   MEMP *ptr;
  49:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  50:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   if ((pool == NULL) || (size < sizeof(MEMP))) return (1);
  45              		.loc 1 50 0
  46 000a 7B68     		ldr	r3, [r7, #4]
  47 000c 002B     		cmp	r3, #0
  48 000e 02D0     		beq	.L2
  49              		.loc 1 50 0 is_stmt 0 discriminator 2
  50 0010 3B68     		ldr	r3, [r7, #0]
  51 0012 072B     		cmp	r3, #7
  52 0014 02D8     		bhi	.L3
  53              	.L2:
  54              		.loc 1 50 0 discriminator 1
  55 0016 4FF00103 		mov	r3, #1
  56 001a 14E0     		b	.L4
  57              	.L3:
  51:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  52:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   ptr = (MEMP *)pool;
  58              		.loc 1 52 0 is_stmt 1
  59 001c 7B68     		ldr	r3, [r7, #4]
  60 001e FB60     		str	r3, [r7, #12]
  53:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   ptr->next = (MEMP *)((U32)pool + size - sizeof(MEMP *));
  61              		.loc 1 53 0
  62 0020 7A68     		ldr	r2, [r7, #4]
  63 0022 3B68     		ldr	r3, [r7, #0]
  64 0024 D318     		adds	r3, r2, r3
  65 0026 A3F10403 		sub	r3, r3, #4
  66 002a 1A46     		mov	r2, r3
  67 002c FB68     		ldr	r3, [r7, #12]
  68 002e 1A60     		str	r2, [r3, #0]
  54:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   ptr->next->next = NULL;
  69              		.loc 1 54 0
  70 0030 FB68     		ldr	r3, [r7, #12]
  71 0032 1B68     		ldr	r3, [r3, #0]
  72 0034 4FF00002 		mov	r2, #0
  73 0038 1A60     		str	r2, [r3, #0]
  55:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   ptr->len = 0; 
  74              		.loc 1 55 0
  75 003a FB68     		ldr	r3, [r7, #12]
  76 003c 4FF00002 		mov	r2, #0
  77 0040 5A60     		str	r2, [r3, #4]
  56:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  57:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   return (0);
  78              		.loc 1 57 0
  79 0042 4FF00003 		mov	r3, #0
  80              	.L4:
  58:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** }
  81              		.loc 1 58 0
  82 0046 1846     		mov	r0, r3
  83 0048 07F11407 		add	r7, r7, #20
  84 004c BD46     		mov	sp, r7
  85 004e 80BC     		pop	{r7}
  86 0050 7047     		bx	lr
  87              		.cfi_endproc
  88              	.LFE0:
  90 0052 00BF     		.section	.text.rt_alloc_mem,"ax",%progbits
  91              		.align	2
  92              		.global	rt_alloc_mem
  93              		.thumb
  94              		.thumb_func
  96              	rt_alloc_mem:
  97              	.LFB1:
  59:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  60:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** // Allocate Memory from Memory pool
  61:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //   Parameters:
  62:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //     pool:    Pointer to memory pool
  63:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //     size:    Size of memory in bytes to allocate
  64:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //   Return:    Pointer to allocated memory
  65:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  66:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** void *rt_alloc_mem (void *pool, U32 size) {
  98              		.loc 1 66 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 24
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0000 80B4     		push	{r7}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 87B0     		sub	sp, sp, #28
 108              	.LCFI4:
 109              		.cfi_def_cfa_offset 32
 110 0004 00AF     		add	r7, sp, #0
 111              	.LCFI5:
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
 114 0008 3960     		str	r1, [r7, #0]
  67:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   MEMP *p, *p_search, *p_new;
  68:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   U32   hole_size;
  69:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  70:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   if ((pool == NULL) || (size == 0)) return NULL;
 115              		.loc 1 70 0
 116 000a 7B68     		ldr	r3, [r7, #4]
 117 000c 002B     		cmp	r3, #0
 118 000e 02D0     		beq	.L6
 119              		.loc 1 70 0 is_stmt 0 discriminator 2
 120 0010 3B68     		ldr	r3, [r7, #0]
 121 0012 002B     		cmp	r3, #0
 122 0014 02D1     		bne	.L7
 123              	.L6:
 124              		.loc 1 70 0 discriminator 1
 125 0016 4FF00003 		mov	r3, #0
 126 001a 47E0     		b	.L8
 127              	.L7:
  71:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  72:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   /* Add header offset to 'size' */
  73:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   size += sizeof(MEMP);
 128              		.loc 1 73 0 is_stmt 1
 129 001c 3B68     		ldr	r3, [r7, #0]
 130 001e 03F10803 		add	r3, r3, #8
 131 0022 3B60     		str	r3, [r7, #0]
  74:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   /* Make sure that block is 4-byte aligned  */
  75:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   size = (size + 3) & ~3;
 132              		.loc 1 75 0
 133 0024 3B68     		ldr	r3, [r7, #0]
 134 0026 03F10303 		add	r3, r3, #3
 135 002a 23F00303 		bic	r3, r3, #3
 136 002e 3B60     		str	r3, [r7, #0]
  76:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  77:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   p_search = (MEMP *)pool;
 137              		.loc 1 77 0
 138 0030 7B68     		ldr	r3, [r7, #4]
 139 0032 3B61     		str	r3, [r7, #16]
 140 0034 00E0     		b	.L12
 141              	.L17:
  78:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   while (1) {
  79:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     hole_size  = (U32)p_search->next - (U32)p_search;
  80:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     hole_size -= p_search->len;
  81:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     /* Check if hole size is big enough */
  82:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     if (hole_size >= size) break;
  83:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_search = p_search->next;
  84:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     if (p_search->next == NULL) {
  85:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****       /* Failed, we are at the end of the list */
  86:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****       return NULL;
  87:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     }
  88:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   }
 142              		.loc 1 88 0
 143 0036 00BF     		nop
 144              	.L12:
  79:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     hole_size  = (U32)p_search->next - (U32)p_search;
 145              		.loc 1 79 0
 146 0038 3B69     		ldr	r3, [r7, #16]
 147 003a 1B68     		ldr	r3, [r3, #0]
 148 003c 1A46     		mov	r2, r3
 149 003e 3B69     		ldr	r3, [r7, #16]
 150 0040 D31A     		subs	r3, r2, r3
 151 0042 FB60     		str	r3, [r7, #12]
  80:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     hole_size -= p_search->len;
 152              		.loc 1 80 0
 153 0044 3B69     		ldr	r3, [r7, #16]
 154 0046 5B68     		ldr	r3, [r3, #4]
 155 0048 FA68     		ldr	r2, [r7, #12]
 156 004a D31A     		subs	r3, r2, r3
 157 004c FB60     		str	r3, [r7, #12]
  82:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     if (hole_size >= size) break;
 158              		.loc 1 82 0
 159 004e FA68     		ldr	r2, [r7, #12]
 160 0050 3B68     		ldr	r3, [r7, #0]
 161 0052 9A42     		cmp	r2, r3
 162 0054 09D2     		bcs	.L16
 163              	.L9:
  83:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_search = p_search->next;
 164              		.loc 1 83 0
 165 0056 3B69     		ldr	r3, [r7, #16]
 166 0058 1B68     		ldr	r3, [r3, #0]
 167 005a 3B61     		str	r3, [r7, #16]
  84:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     if (p_search->next == NULL) {
 168              		.loc 1 84 0
 169 005c 3B69     		ldr	r3, [r7, #16]
 170 005e 1B68     		ldr	r3, [r3, #0]
 171 0060 002B     		cmp	r3, #0
 172 0062 E8D1     		bne	.L17
  86:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****       return NULL;
 173              		.loc 1 86 0
 174 0064 4FF00003 		mov	r3, #0
 175 0068 20E0     		b	.L8
 176              	.L16:
  82:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     if (hole_size >= size) break;
 177              		.loc 1 82 0
 178 006a 00BF     		nop
 179              	.L15:
  89:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
  90:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   if (p_search->len == 0) {
 180              		.loc 1 90 0
 181 006c 3B69     		ldr	r3, [r7, #16]
 182 006e 5B68     		ldr	r3, [r3, #4]
 183 0070 002B     		cmp	r3, #0
 184 0072 07D1     		bne	.L13
  91:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     /* No block is allocated, set the Length of the first element */
  92:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_search->len = size;
 185              		.loc 1 92 0
 186 0074 3B69     		ldr	r3, [r7, #16]
 187 0076 3A68     		ldr	r2, [r7, #0]
 188 0078 5A60     		str	r2, [r3, #4]
  93:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p = (MEMP *)(((U32)p_search) + sizeof(MEMP));
 189              		.loc 1 93 0
 190 007a 3B69     		ldr	r3, [r7, #16]
 191 007c 03F10803 		add	r3, r3, #8
 192 0080 7B61     		str	r3, [r7, #20]
 193 0082 12E0     		b	.L14
 194              	.L13:
  94:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   } else {
  95:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     /* Insert new list element into the memory list */
  96:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_new       = (MEMP *)((U32)p_search + p_search->len);
 195              		.loc 1 96 0
 196 0084 3B69     		ldr	r3, [r7, #16]
 197 0086 5A68     		ldr	r2, [r3, #4]
 198 0088 3B69     		ldr	r3, [r7, #16]
 199 008a D318     		adds	r3, r2, r3
 200 008c BB60     		str	r3, [r7, #8]
  97:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_new->next = p_search->next;
 201              		.loc 1 97 0
 202 008e 3B69     		ldr	r3, [r7, #16]
 203 0090 1A68     		ldr	r2, [r3, #0]
 204 0092 BB68     		ldr	r3, [r7, #8]
 205 0094 1A60     		str	r2, [r3, #0]
  98:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_new->len  = size;
 206              		.loc 1 98 0
 207 0096 BB68     		ldr	r3, [r7, #8]
 208 0098 3A68     		ldr	r2, [r7, #0]
 209 009a 5A60     		str	r2, [r3, #4]
  99:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_search->next = p_new;
 210              		.loc 1 99 0
 211 009c 3B69     		ldr	r3, [r7, #16]
 212 009e BA68     		ldr	r2, [r7, #8]
 213 00a0 1A60     		str	r2, [r3, #0]
 100:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p = (MEMP *)(((U32)p_new) + sizeof(MEMP));
 214              		.loc 1 100 0
 215 00a2 BB68     		ldr	r3, [r7, #8]
 216 00a4 03F10803 		add	r3, r3, #8
 217 00a8 7B61     		str	r3, [r7, #20]
 218              	.L14:
 101:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   }
 102:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 103:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   return (p);
 219              		.loc 1 103 0
 220 00aa 7B69     		ldr	r3, [r7, #20]
 221              	.L8:
 104:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** }
 222              		.loc 1 104 0
 223 00ac 1846     		mov	r0, r3
 224 00ae 07F11C07 		add	r7, r7, #28
 225 00b2 BD46     		mov	sp, r7
 226 00b4 80BC     		pop	{r7}
 227 00b6 7047     		bx	lr
 228              		.cfi_endproc
 229              	.LFE1:
 231              		.section	.text.rt_free_mem,"ax",%progbits
 232              		.align	2
 233              		.global	rt_free_mem
 234              		.thumb
 235              		.thumb_func
 237              	rt_free_mem:
 238              	.LFB2:
 105:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 106:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** // Free Memory and return it to Memory pool
 107:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //   Parameters:
 108:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //     pool:    Pointer to memory pool
 109:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //     mem:     Pointer to memory to free
 110:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** //   Return:    0 - OK, 1 - Error
 111:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 112:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** int rt_free_mem (void *pool, void *mem) {
 239              		.loc 1 112 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 24
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244 0000 80B4     		push	{r7}
 245              	.LCFI6:
 246              		.cfi_def_cfa_offset 4
 247              		.cfi_offset 7, -4
 248 0002 87B0     		sub	sp, sp, #28
 249              	.LCFI7:
 250              		.cfi_def_cfa_offset 32
 251 0004 00AF     		add	r7, sp, #0
 252              	.LCFI8:
 253              		.cfi_def_cfa_register 7
 254 0006 7860     		str	r0, [r7, #4]
 255 0008 3960     		str	r1, [r7, #0]
 113:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   MEMP *p_search, *p_prev, *p_return;
 114:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 115:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   if ((pool == NULL) || (mem == NULL)) return (1);
 256              		.loc 1 115 0
 257 000a 7B68     		ldr	r3, [r7, #4]
 258 000c 002B     		cmp	r3, #0
 259 000e 02D0     		beq	.L19
 260              		.loc 1 115 0 is_stmt 0 discriminator 2
 261 0010 3B68     		ldr	r3, [r7, #0]
 262 0012 002B     		cmp	r3, #0
 263 0014 02D1     		bne	.L20
 264              	.L19:
 265              		.loc 1 115 0 discriminator 1
 266 0016 4FF00103 		mov	r3, #1
 267 001a 26E0     		b	.L21
 268              	.L20:
 116:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 117:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   p_return = (MEMP *)((U32)mem - sizeof(MEMP));
 269              		.loc 1 117 0 is_stmt 1
 270 001c 3B68     		ldr	r3, [r7, #0]
 271 001e A3F10803 		sub	r3, r3, #8
 272 0022 FB60     		str	r3, [r7, #12]
 118:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   
 119:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   /* Set list header */
 120:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   p_prev = NULL;
 273              		.loc 1 120 0
 274 0024 4FF00003 		mov	r3, #0
 275 0028 3B61     		str	r3, [r7, #16]
 121:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   p_search = (MEMP *)pool;
 276              		.loc 1 121 0
 277 002a 7B68     		ldr	r3, [r7, #4]
 278 002c 7B61     		str	r3, [r7, #20]
 122:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   while (p_search != p_return) {
 279              		.loc 1 122 0
 280 002e 0AE0     		b	.L22
 281              	.L23:
 123:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_prev   = p_search;
 282              		.loc 1 123 0
 283 0030 7B69     		ldr	r3, [r7, #20]
 284 0032 3B61     		str	r3, [r7, #16]
 124:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_search = p_search->next;
 285              		.loc 1 124 0
 286 0034 7B69     		ldr	r3, [r7, #20]
 287 0036 1B68     		ldr	r3, [r3, #0]
 288 0038 7B61     		str	r3, [r7, #20]
 125:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     if (p_search == NULL) {
 289              		.loc 1 125 0
 290 003a 7B69     		ldr	r3, [r7, #20]
 291 003c 002B     		cmp	r3, #0
 292 003e 02D1     		bne	.L22
 126:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****       /* Valid Memory block not found */
 127:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****       return (1);
 293              		.loc 1 127 0
 294 0040 4FF00103 		mov	r3, #1
 295 0044 11E0     		b	.L21
 296              	.L22:
 122:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   while (p_search != p_return) {
 297              		.loc 1 122 0 discriminator 1
 298 0046 7A69     		ldr	r2, [r7, #20]
 299 0048 FB68     		ldr	r3, [r7, #12]
 300 004a 9A42     		cmp	r2, r3
 301 004c F0D1     		bne	.L23
 128:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     }
 129:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   }
 130:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 131:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   if (p_prev == NULL) {
 302              		.loc 1 131 0
 303 004e 3B69     		ldr	r3, [r7, #16]
 304 0050 002B     		cmp	r3, #0
 305 0052 04D1     		bne	.L24
 132:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     /* First block to be released, only set length to 0 */
 133:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_search->len = 0;
 306              		.loc 1 133 0
 307 0054 7B69     		ldr	r3, [r7, #20]
 308 0056 4FF00002 		mov	r2, #0
 309 005a 5A60     		str	r2, [r3, #4]
 310 005c 03E0     		b	.L25
 311              	.L24:
 134:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   } else {
 135:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     /* Discard block from chain list */
 136:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****     p_prev->next = p_search->next;
 312              		.loc 1 136 0
 313 005e 7B69     		ldr	r3, [r7, #20]
 314 0060 1A68     		ldr	r2, [r3, #0]
 315 0062 3B69     		ldr	r3, [r7, #16]
 316 0064 1A60     		str	r2, [r3, #0]
 317              	.L25:
 137:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   }
 138:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** 
 139:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c ****   return (0);
 318              		.loc 1 139 0
 319 0066 4FF00003 		mov	r3, #0
 320              	.L21:
 140:../Dave/Generated/src/RTOS001/SRC/rt_Memory.c **** }
 321              		.loc 1 140 0
 322 006a 1846     		mov	r0, r3
 323 006c 07F11C07 		add	r7, r7, #28
 324 0070 BD46     		mov	sp, r7
 325 0072 80BC     		pop	{r7}
 326 0074 7047     		bx	lr
 327              		.cfi_endproc
 328              	.LFE2:
 330 0076 00BF     		.text
 331              	.Letext0:
 332              		.file 2 "../Dave/Generated/src/RTOS001/SRC/rt_TypeDef.h"
 333              		.file 3 "../Dave/Generated/src/RTOS001/SRC/rt_Memory.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rt_Memory.c
C:\Users\LIUDAN~1\AppData\Local\Temp\ccwRAUxq.s:20     .text.rt_init_mem:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccwRAUxq.s:25     .text.rt_init_mem:00000000 rt_init_mem
C:\Users\LIUDAN~1\AppData\Local\Temp\ccwRAUxq.s:91     .text.rt_alloc_mem:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccwRAUxq.s:96     .text.rt_alloc_mem:00000000 rt_alloc_mem
C:\Users\LIUDAN~1\AppData\Local\Temp\ccwRAUxq.s:232    .text.rt_free_mem:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccwRAUxq.s:237    .text.rt_free_mem:00000000 rt_free_mem
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.rt_TypeDef.h.79.db0d61ef3f79bbdae3d134fa36f08304

NO UNDEFINED SYMBOLS
