   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"rt_Event.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rt_evt_wait,"ax",%progbits
  20              		.align	2
  21              		.global	rt_evt_wait
  22              		.thumb
  23              		.thumb_func
  25              	rt_evt_wait:
  26              	.LFB8:
  27              		.file 1 "../Dave/Generated/src/RTOS001/SRC/rt_Event.c"
   1:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*----------------------------------------------------------------------------
   2:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *      RL-ARM - RTX
   3:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *----------------------------------------------------------------------------
   4:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *      Name:    RT_EVENT.C
   5:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *      Purpose: Implements waits and wake-ups for event flags
   6:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *      Rev.:    V4.70
   7:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *----------------------------------------------------------------------------
   8:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *
   9:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  10:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * All rights reserved.
  11:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * Redistribution and use in source and binary forms, with or without
  12:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * modification, are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *  - Redistributions of source code must retain the above copyright
  14:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *    notice, this list of conditions and the following disclaimer.
  15:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *  - Redistributions in binary form must reproduce the above copyright
  16:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *    notice, this list of conditions and the following disclaimer in the
  17:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *    documentation and/or other materials provided with the distribution.
  18:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  19:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *    to endorse or promote products derived from this software without 
  20:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *    specific prior written permission.
  21:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *
  22:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  23:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  24:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  26:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  28:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  29:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  30:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  * POSSIBILITY OF SUCH DAMAGE.
  33:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *---------------------------------------------------------------------------*/
  34:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  35:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "rt_TypeDef.h"
  36:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "RTX_Config.h"
  37:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "rt_System.h"
  38:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "rt_Event.h"
  39:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "rt_List.h"
  40:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "rt_Task.h"
  41:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #include "rt_HAL_CM.h"
  42:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  43:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  44:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*----------------------------------------------------------------------------
  45:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *      Functions
  46:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****  *---------------------------------------------------------------------------*/
  47:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  48:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  49:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*--------------------------- rt_evt_wait -----------------------------------*/
  50:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  51:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** OS_RESULT rt_evt_wait (U16 wait_flags, U16 timeout, BOOL and_wait) {
  28              		.loc 1 51 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 0B46     		mov	r3, r1
  44 0008 3A60     		str	r2, [r7, #0]
  45 000a 0246     		mov	r2, r0	@ movhi
  46 000c FA80     		strh	r2, [r7, #6]	@ movhi
  47 000e BB80     		strh	r3, [r7, #4]	@ movhi
  52:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Wait for one or more event flags with optional time-out.                */
  53:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* "wait_flags" identifies the flags to wait for.                          */
  54:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* "timeout" is the time-out limit in system ticks (0xffff if no time-out) */
  55:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* "and_wait" specifies the AND-ing of "wait_flags" as condition to be met */
  56:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* to complete the wait. (OR-ing if set to 0).                             */
  57:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   U32 block_state;
  58:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  59:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (and_wait) {
  48              		.loc 1 59 0
  49 0010 3B68     		ldr	r3, [r7, #0]
  50 0012 002B     		cmp	r3, #0
  51 0014 26D0     		beq	.L2
  60:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     /* Check for AND-connected events */
  61:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     if ((os_tsk.run->events & wait_flags) == wait_flags) {
  52              		.loc 1 61 0
  53 0016 40F20003 		movw	r3, #:lower16:os_tsk
  54 001a C0F20003 		movt	r3, #:upper16:os_tsk
  55 001e 1B68     		ldr	r3, [r3, #0]
  56 0020 1A8B     		ldrh	r2, [r3, #24]
  57 0022 FB88     		ldrh	r3, [r7, #6]	@ movhi
  58 0024 1340     		ands	r3, r3, r2
  59 0026 9BB2     		uxth	r3, r3
  60 0028 FA88     		ldrh	r2, [r7, #6]
  61 002a 9A42     		cmp	r2, r3
  62 002c 16D1     		bne	.L3
  62:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       os_tsk.run->events &= ~wait_flags;
  63              		.loc 1 62 0
  64 002e 40F20003 		movw	r3, #:lower16:os_tsk
  65 0032 C0F20003 		movt	r3, #:upper16:os_tsk
  66 0036 1A68     		ldr	r2, [r3, #0]
  67 0038 40F20003 		movw	r3, #:lower16:os_tsk
  68 003c C0F20003 		movt	r3, #:upper16:os_tsk
  69 0040 1B68     		ldr	r3, [r3, #0]
  70 0042 1B8B     		ldrh	r3, [r3, #24]
  71 0044 99B2     		uxth	r1, r3
  72 0046 FB88     		ldrh	r3, [r7, #6]
  73 0048 6FEA0303 		mvn	r3, r3
  74 004c 9BB2     		uxth	r3, r3
  75 004e 0B40     		ands	r3, r3, r1
  76 0050 9BB2     		uxth	r3, r3
  77 0052 9BB2     		uxth	r3, r3
  78 0054 1383     		strh	r3, [r2, #24]	@ movhi
  63:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       return (OS_R_EVT);
  79              		.loc 1 63 0
  80 0056 4FF00203 		mov	r3, #2
  81 005a 47E0     		b	.L4
  82              	.L3:
  64:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     }
  65:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     block_state = WAIT_AND;
  83              		.loc 1 65 0
  84 005c 4FF00603 		mov	r3, #6
  85 0060 FB60     		str	r3, [r7, #12]
  86 0062 33E0     		b	.L5
  87              	.L2:
  66:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
  67:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   else {
  68:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     /* Check for OR-connected events */
  69:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     if (os_tsk.run->events & wait_flags) {
  88              		.loc 1 69 0
  89 0064 40F20003 		movw	r3, #:lower16:os_tsk
  90 0068 C0F20003 		movt	r3, #:upper16:os_tsk
  91 006c 1B68     		ldr	r3, [r3, #0]
  92 006e 1A8B     		ldrh	r2, [r3, #24]
  93 0070 FB88     		ldrh	r3, [r7, #6]	@ movhi
  94 0072 1340     		ands	r3, r3, r2
  95 0074 9BB2     		uxth	r3, r3
  96 0076 002B     		cmp	r3, #0
  97 0078 25D0     		beq	.L6
  70:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       os_tsk.run->waits = os_tsk.run->events & wait_flags;
  98              		.loc 1 70 0
  99 007a 40F20003 		movw	r3, #:lower16:os_tsk
 100 007e C0F20003 		movt	r3, #:upper16:os_tsk
 101 0082 1A68     		ldr	r2, [r3, #0]
 102 0084 40F20003 		movw	r3, #:lower16:os_tsk
 103 0088 C0F20003 		movt	r3, #:upper16:os_tsk
 104 008c 1B68     		ldr	r3, [r3, #0]
 105 008e 198B     		ldrh	r1, [r3, #24]
 106 0090 FB88     		ldrh	r3, [r7, #6]	@ movhi
 107 0092 0B40     		ands	r3, r3, r1
 108 0094 9BB2     		uxth	r3, r3
 109 0096 5383     		strh	r3, [r2, #26]	@ movhi
  71:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       os_tsk.run->events &= ~wait_flags;
 110              		.loc 1 71 0
 111 0098 40F20003 		movw	r3, #:lower16:os_tsk
 112 009c C0F20003 		movt	r3, #:upper16:os_tsk
 113 00a0 1A68     		ldr	r2, [r3, #0]
 114 00a2 40F20003 		movw	r3, #:lower16:os_tsk
 115 00a6 C0F20003 		movt	r3, #:upper16:os_tsk
 116 00aa 1B68     		ldr	r3, [r3, #0]
 117 00ac 1B8B     		ldrh	r3, [r3, #24]
 118 00ae 99B2     		uxth	r1, r3
 119 00b0 FB88     		ldrh	r3, [r7, #6]
 120 00b2 6FEA0303 		mvn	r3, r3
 121 00b6 9BB2     		uxth	r3, r3
 122 00b8 0B40     		ands	r3, r3, r1
 123 00ba 9BB2     		uxth	r3, r3
 124 00bc 9BB2     		uxth	r3, r3
 125 00be 1383     		strh	r3, [r2, #24]	@ movhi
  72:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       return (OS_R_EVT);
 126              		.loc 1 72 0
 127 00c0 4FF00203 		mov	r3, #2
 128 00c4 12E0     		b	.L4
 129              	.L6:
  73:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     }
  74:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     block_state = WAIT_OR;
 130              		.loc 1 74 0
 131 00c6 4FF00503 		mov	r3, #5
 132 00ca FB60     		str	r3, [r7, #12]
 133              	.L5:
  75:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
  76:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Task has to wait */
  77:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   os_tsk.run->waits = wait_flags;
 134              		.loc 1 77 0
 135 00cc 40F20003 		movw	r3, #:lower16:os_tsk
 136 00d0 C0F20003 		movt	r3, #:upper16:os_tsk
 137 00d4 1B68     		ldr	r3, [r3, #0]
 138 00d6 FA88     		ldrh	r2, [r7, #6]	@ movhi
 139 00d8 5A83     		strh	r2, [r3, #26]	@ movhi
  78:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   rt_block (timeout, (U8)block_state);
 140              		.loc 1 78 0
 141 00da FB68     		ldr	r3, [r7, #12]
 142 00dc DBB2     		uxtb	r3, r3
 143 00de BA88     		ldrh	r2, [r7, #4]
 144 00e0 1046     		mov	r0, r2
 145 00e2 1946     		mov	r1, r3
 146 00e4 FFF7FEFF 		bl	rt_block
  79:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   return (OS_R_TMO);
 147              		.loc 1 79 0
 148 00e8 4FF00103 		mov	r3, #1
 149              	.L4:
  80:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** }
 150              		.loc 1 80 0
 151 00ec 1846     		mov	r0, r3
 152 00ee 07F11007 		add	r7, r7, #16
 153 00f2 BD46     		mov	sp, r7
 154 00f4 80BD     		pop	{r7, pc}
 155              		.cfi_endproc
 156              	.LFE8:
 158 00f6 00BF     		.section	.text.rt_evt_set,"ax",%progbits
 159              		.align	2
 160              		.global	rt_evt_set
 161              		.thumb
 162              		.thumb_func
 164              	rt_evt_set:
 165              	.LFB9:
  81:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  82:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  83:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*--------------------------- rt_evt_set ------------------------------------*/
  84:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  85:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** void rt_evt_set (U16 event_flags, OS_TID task_id) {
 166              		.loc 1 85 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 16
 169              		@ frame_needed = 1, uses_anonymous_args = 0
 170 0000 80B5     		push	{r7, lr}
 171              	.LCFI3:
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 7, -8
 174              		.cfi_offset 14, -4
 175 0002 84B0     		sub	sp, sp, #16
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 24
 178 0004 00AF     		add	r7, sp, #0
 179              	.LCFI5:
 180              		.cfi_def_cfa_register 7
 181 0006 0346     		mov	r3, r0
 182 0008 3960     		str	r1, [r7, #0]
 183 000a FB80     		strh	r3, [r7, #6]	@ movhi
  86:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Set one or more event flags of a selectable task. */
  87:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   P_TCB p_tcb;
  88:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
  89:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   p_tcb = os_active_TCB[task_id-1];
 184              		.loc 1 89 0
 185 000c 3B68     		ldr	r3, [r7, #0]
 186 000e 03F1FF32 		add	r2, r3, #-1
 187 0012 40F20003 		movw	r3, #:lower16:os_active_TCB
 188 0016 C0F20003 		movt	r3, #:upper16:os_active_TCB
 189 001a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 190 001e FB60     		str	r3, [r7, #12]
  90:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (p_tcb == NULL) {
 191              		.loc 1 90 0
 192 0020 FB68     		ldr	r3, [r7, #12]
 193 0022 002B     		cmp	r3, #0
 194 0024 49D0     		beq	.L12
 195              	.L8:
  91:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     return;
  92:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
  93:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   p_tcb->events |= event_flags;
 196              		.loc 1 93 0
 197 0026 FB68     		ldr	r3, [r7, #12]
 198 0028 1A8B     		ldrh	r2, [r3, #24]
 199 002a FB88     		ldrh	r3, [r7, #6]	@ movhi
 200 002c 1343     		orrs	r3, r3, r2
 201 002e 9AB2     		uxth	r2, r3
 202 0030 FB68     		ldr	r3, [r7, #12]
 203 0032 1A83     		strh	r2, [r3, #24]	@ movhi
  94:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   event_flags    = p_tcb->waits;
 204              		.loc 1 94 0
 205 0034 FB68     		ldr	r3, [r7, #12]
 206 0036 5B8B     		ldrh	r3, [r3, #26]	@ movhi
 207 0038 FB80     		strh	r3, [r7, #6]	@ movhi
  95:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* If the task is not waiting for an event, it should not be put */
  96:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* to ready state. */
  97:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (p_tcb->state == WAIT_AND) {
 208              		.loc 1 97 0
 209 003a FB68     		ldr	r3, [r7, #12]
 210 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 211 003e 062B     		cmp	r3, #6
 212 0040 07D1     		bne	.L10
  98:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     /* Check for AND-connected events */
  99:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     if ((p_tcb->events & event_flags) == event_flags) {
 213              		.loc 1 99 0
 214 0042 FB68     		ldr	r3, [r7, #12]
 215 0044 1A8B     		ldrh	r2, [r3, #24]
 216 0046 FB88     		ldrh	r3, [r7, #6]	@ movhi
 217 0048 1340     		ands	r3, r3, r2
 218 004a 9BB2     		uxth	r3, r3
 219 004c FA88     		ldrh	r2, [r7, #6]
 220 004e 9A42     		cmp	r2, r3
 221 0050 13D0     		beq	.L13
 222              	.L10:
 100:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       goto wkup;
 101:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     }
 102:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
 103:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (p_tcb->state == WAIT_OR) {
 223              		.loc 1 103 0
 224 0052 FB68     		ldr	r3, [r7, #12]
 225 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 226 0056 052B     		cmp	r3, #5
 227 0058 30D1     		bne	.L7
 104:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     /* Check for OR-connected events */
 105:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     if (p_tcb->events & event_flags) {
 228              		.loc 1 105 0
 229 005a FB68     		ldr	r3, [r7, #12]
 230 005c 1A8B     		ldrh	r2, [r3, #24]
 231 005e FB88     		ldrh	r3, [r7, #6]	@ movhi
 232 0060 1340     		ands	r3, r3, r2
 233 0062 9BB2     		uxth	r3, r3
 234 0064 002B     		cmp	r3, #0
 235 0066 29D0     		beq	.L7
 106:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       p_tcb->waits  &= p_tcb->events;
 236              		.loc 1 106 0
 237 0068 FB68     		ldr	r3, [r7, #12]
 238 006a 5A8B     		ldrh	r2, [r3, #26]
 239 006c FB68     		ldr	r3, [r7, #12]
 240 006e 1B8B     		ldrh	r3, [r3, #24]
 241 0070 1340     		ands	r3, r3, r2
 242 0072 9AB2     		uxth	r2, r3
 243 0074 FB68     		ldr	r3, [r7, #12]
 244 0076 5A83     		strh	r2, [r3, #26]	@ movhi
 245 0078 00E0     		b	.L11
 246              	.L13:
 100:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       goto wkup;
 247              		.loc 1 100 0
 248 007a 00BF     		nop
 249              	.L11:
 107:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** wkup: p_tcb->events &= ~event_flags;
 250              		.loc 1 107 0
 251 007c FB68     		ldr	r3, [r7, #12]
 252 007e 1B8B     		ldrh	r3, [r3, #24]
 253 0080 9AB2     		uxth	r2, r3
 254 0082 FB88     		ldrh	r3, [r7, #6]
 255 0084 6FEA0303 		mvn	r3, r3
 256 0088 9BB2     		uxth	r3, r3
 257 008a 1340     		ands	r3, r3, r2
 258 008c 9BB2     		uxth	r3, r3
 259 008e 9AB2     		uxth	r2, r3
 260 0090 FB68     		ldr	r3, [r7, #12]
 261 0092 1A83     		strh	r2, [r3, #24]	@ movhi
 108:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_rmv_dly (p_tcb);
 262              		.loc 1 108 0
 263 0094 F868     		ldr	r0, [r7, #12]
 264 0096 FFF7FEFF 		bl	rt_rmv_dly
 109:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       p_tcb->state   = READY;
 265              		.loc 1 109 0
 266 009a FB68     		ldr	r3, [r7, #12]
 267 009c 4FF00102 		mov	r2, #1
 268 00a0 5A70     		strb	r2, [r3, #1]
 110:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #ifdef __CMSIS_RTOS
 111:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_ret_val2(p_tcb, 0x08/*osEventSignal*/, p_tcb->waits); 
 269              		.loc 1 111 0
 270 00a2 FB68     		ldr	r3, [r7, #12]
 271 00a4 5B8B     		ldrh	r3, [r3, #26]
 272 00a6 F868     		ldr	r0, [r7, #12]
 273 00a8 4FF00801 		mov	r1, #8
 274 00ac 1A46     		mov	r2, r3
 275 00ae FFF7FEFF 		bl	rt_ret_val2
 112:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #else
 113:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_ret_val (p_tcb, OS_R_EVT);
 114:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #endif
 115:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_dispatch (p_tcb);
 276              		.loc 1 115 0
 277 00b2 F868     		ldr	r0, [r7, #12]
 278 00b4 FFF7FEFF 		bl	rt_dispatch
 279 00b8 00E0     		b	.L7
 280              	.L12:
  91:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     return;
 281              		.loc 1 91 0
 282 00ba 00BF     		nop
 283              	.L7:
 116:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     }
 117:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
 118:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** }
 284              		.loc 1 118 0
 285 00bc 07F11007 		add	r7, r7, #16
 286 00c0 BD46     		mov	sp, r7
 287 00c2 80BD     		pop	{r7, pc}
 288              		.cfi_endproc
 289              	.LFE9:
 291              		.section	.text.rt_evt_clr,"ax",%progbits
 292              		.align	2
 293              		.global	rt_evt_clr
 294              		.thumb
 295              		.thumb_func
 297              	rt_evt_clr:
 298              	.LFB10:
 119:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 120:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 121:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*--------------------------- rt_evt_clr ------------------------------------*/
 122:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 123:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** void rt_evt_clr (U16 clear_flags, OS_TID task_id) {
 299              		.loc 1 123 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 16
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304 0000 80B4     		push	{r7}
 305              	.LCFI6:
 306              		.cfi_def_cfa_offset 4
 307              		.cfi_offset 7, -4
 308 0002 85B0     		sub	sp, sp, #20
 309              	.LCFI7:
 310              		.cfi_def_cfa_offset 24
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI8:
 313              		.cfi_def_cfa_register 7
 314 0006 0346     		mov	r3, r0
 315 0008 3960     		str	r1, [r7, #0]
 316 000a FB80     		strh	r3, [r7, #6]	@ movhi
 124:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Clear one or more event flags (identified by "clear_flags") of a */
 125:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* selectable task (identified by "task"). */
 126:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   P_TCB task = os_active_TCB[task_id-1];
 317              		.loc 1 126 0
 318 000c 3B68     		ldr	r3, [r7, #0]
 319 000e 03F1FF32 		add	r2, r3, #-1
 320 0012 40F20003 		movw	r3, #:lower16:os_active_TCB
 321 0016 C0F20003 		movt	r3, #:upper16:os_active_TCB
 322 001a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 323 001e FB60     		str	r3, [r7, #12]
 127:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 128:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (task == NULL) {
 324              		.loc 1 128 0
 325 0020 FB68     		ldr	r3, [r7, #12]
 326 0022 002B     		cmp	r3, #0
 327 0024 0CD0     		beq	.L17
 328              	.L15:
 129:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     return;
 130:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
 131:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   task->events &= ~clear_flags;
 329              		.loc 1 131 0
 330 0026 FB68     		ldr	r3, [r7, #12]
 331 0028 1B8B     		ldrh	r3, [r3, #24]
 332 002a 9AB2     		uxth	r2, r3
 333 002c FB88     		ldrh	r3, [r7, #6]
 334 002e 6FEA0303 		mvn	r3, r3
 335 0032 9BB2     		uxth	r3, r3
 336 0034 1340     		ands	r3, r3, r2
 337 0036 9BB2     		uxth	r3, r3
 338 0038 9AB2     		uxth	r2, r3
 339 003a FB68     		ldr	r3, [r7, #12]
 340 003c 1A83     		strh	r2, [r3, #24]	@ movhi
 341 003e 00E0     		b	.L14
 342              	.L17:
 129:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     return;
 343              		.loc 1 129 0
 344 0040 00BF     		nop
 345              	.L14:
 132:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** }
 346              		.loc 1 132 0
 347 0042 07F11407 		add	r7, r7, #20
 348 0046 BD46     		mov	sp, r7
 349 0048 80BC     		pop	{r7}
 350 004a 7047     		bx	lr
 351              		.cfi_endproc
 352              	.LFE10:
 354              		.section	.text.isr_evt_set,"ax",%progbits
 355              		.align	2
 356              		.global	isr_evt_set
 357              		.thumb
 358              		.thumb_func
 360              	isr_evt_set:
 361              	.LFB11:
 133:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 134:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 135:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*--------------------------- isr_evt_set -----------------------------------*/
 136:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 137:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** void isr_evt_set (U16 event_flags, OS_TID task_id) {
 362              		.loc 1 137 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 16
 365              		@ frame_needed = 1, uses_anonymous_args = 0
 366 0000 80B5     		push	{r7, lr}
 367              	.LCFI9:
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 84B0     		sub	sp, sp, #16
 372              	.LCFI10:
 373              		.cfi_def_cfa_offset 24
 374 0004 00AF     		add	r7, sp, #0
 375              	.LCFI11:
 376              		.cfi_def_cfa_register 7
 377 0006 0346     		mov	r3, r0
 378 0008 3960     		str	r1, [r7, #0]
 379 000a FB80     		strh	r3, [r7, #6]	@ movhi
 138:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Same function as "os_evt_set", but to be called by ISRs. */
 139:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   P_TCB p_tcb = os_active_TCB[task_id-1];
 380              		.loc 1 139 0
 381 000c 3B68     		ldr	r3, [r7, #0]
 382 000e 03F1FF32 		add	r2, r3, #-1
 383 0012 40F20003 		movw	r3, #:lower16:os_active_TCB
 384 0016 C0F20003 		movt	r3, #:upper16:os_active_TCB
 385 001a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 386 001e FB60     		str	r3, [r7, #12]
 140:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 141:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (p_tcb == NULL) {
 387              		.loc 1 141 0
 388 0020 FB68     		ldr	r3, [r7, #12]
 389 0022 002B     		cmp	r3, #0
 390 0024 07D0     		beq	.L21
 391              	.L19:
 142:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     return;
 143:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
 144:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   rt_psq_enq (p_tcb, event_flags);
 392              		.loc 1 144 0
 393 0026 FB88     		ldrh	r3, [r7, #6]
 394 0028 F868     		ldr	r0, [r7, #12]
 395 002a 1946     		mov	r1, r3
 396 002c FFF7FEFF 		bl	rt_psq_enq
 145:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   rt_psh_req ();
 397              		.loc 1 145 0
 398 0030 FFF7FEFF 		bl	rt_psh_req
 399 0034 00E0     		b	.L18
 400              	.L21:
 142:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     return;
 401              		.loc 1 142 0
 402 0036 00BF     		nop
 403              	.L18:
 146:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** }
 404              		.loc 1 146 0
 405 0038 07F11007 		add	r7, r7, #16
 406 003c BD46     		mov	sp, r7
 407 003e 80BD     		pop	{r7, pc}
 408              		.cfi_endproc
 409              	.LFE11:
 411              		.section	.text.rt_evt_get,"ax",%progbits
 412              		.align	2
 413              		.global	rt_evt_get
 414              		.thumb
 415              		.thumb_func
 417              	rt_evt_get:
 418              	.LFB12:
 147:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 148:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 149:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*--------------------------- rt_evt_get ------------------------------------*/
 150:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 151:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** U16 rt_evt_get (void) {
 419              		.loc 1 151 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0000 80B4     		push	{r7}
 425              	.LCFI12:
 426              		.cfi_def_cfa_offset 4
 427              		.cfi_offset 7, -4
 428 0002 00AF     		add	r7, sp, #0
 429              	.LCFI13:
 430              		.cfi_def_cfa_register 7
 152:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Get events of a running task after waiting for OR connected events. */
 153:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   return (os_tsk.run->waits);
 431              		.loc 1 153 0
 432 0004 40F20003 		movw	r3, #:lower16:os_tsk
 433 0008 C0F20003 		movt	r3, #:upper16:os_tsk
 434 000c 1B68     		ldr	r3, [r3, #0]
 435 000e 5B8B     		ldrh	r3, [r3, #26]
 154:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** }
 436              		.loc 1 154 0
 437 0010 1846     		mov	r0, r3
 438 0012 BD46     		mov	sp, r7
 439 0014 80BC     		pop	{r7}
 440 0016 7047     		bx	lr
 441              		.cfi_endproc
 442              	.LFE12:
 444              		.section	.text.rt_evt_psh,"ax",%progbits
 445              		.align	2
 446              		.global	rt_evt_psh
 447              		.thumb
 448              		.thumb_func
 450              	rt_evt_psh:
 451              	.LFB13:
 155:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 156:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 157:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** /*--------------------------- rt_evt_psh ------------------------------------*/
 158:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 159:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** void rt_evt_psh (P_TCB p_CB, U16 set_flags) {
 452              		.loc 1 159 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 16
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 80B5     		push	{r7, lr}
 457              	.LCFI14:
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 84B0     		sub	sp, sp, #16
 462              	.LCFI15:
 463              		.cfi_def_cfa_offset 24
 464 0004 00AF     		add	r7, sp, #0
 465              	.LCFI16:
 466              		.cfi_def_cfa_register 7
 467 0006 7860     		str	r0, [r7, #4]
 468 0008 0B46     		mov	r3, r1
 469 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 160:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   /* Check if task has to be waken up */
 161:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   U16 event_flags;
 162:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** 
 163:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   p_CB->events |= set_flags;
 470              		.loc 1 163 0
 471 000c 7B68     		ldr	r3, [r7, #4]
 472 000e 1A8B     		ldrh	r2, [r3, #24]
 473 0010 7B88     		ldrh	r3, [r7, #2]	@ movhi
 474 0012 1343     		orrs	r3, r3, r2
 475 0014 9AB2     		uxth	r2, r3
 476 0016 7B68     		ldr	r3, [r7, #4]
 477 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 164:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   event_flags = p_CB->waits;
 478              		.loc 1 164 0
 479 001a 7B68     		ldr	r3, [r7, #4]
 480 001c 5B8B     		ldrh	r3, [r3, #26]	@ movhi
 481 001e FB81     		strh	r3, [r7, #14]	@ movhi
 165:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (p_CB->state == WAIT_AND) {
 482              		.loc 1 165 0
 483 0020 7B68     		ldr	r3, [r7, #4]
 484 0022 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 485 0024 062B     		cmp	r3, #6
 486 0026 07D1     		bne	.L25
 166:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     /* Check for AND-connected events */
 167:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     if ((p_CB->events & event_flags) == event_flags) {
 487              		.loc 1 167 0
 488 0028 7B68     		ldr	r3, [r7, #4]
 489 002a 1A8B     		ldrh	r2, [r3, #24]
 490 002c FB89     		ldrh	r3, [r7, #14]	@ movhi
 491 002e 1340     		ands	r3, r3, r2
 492 0030 9BB2     		uxth	r3, r3
 493 0032 FA89     		ldrh	r2, [r7, #14]
 494 0034 9A42     		cmp	r2, r3
 495 0036 13D0     		beq	.L28
 496              	.L25:
 168:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       goto rdy;
 169:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     }
 170:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
 171:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   if (p_CB->state == WAIT_OR) {
 497              		.loc 1 171 0
 498 0038 7B68     		ldr	r3, [r7, #4]
 499 003a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 500 003c 052B     		cmp	r3, #5
 501 003e 32D1     		bne	.L24
 172:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     /* Check for OR-connected events */
 173:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     if (p_CB->events & event_flags) {
 502              		.loc 1 173 0
 503 0040 7B68     		ldr	r3, [r7, #4]
 504 0042 1A8B     		ldrh	r2, [r3, #24]
 505 0044 FB89     		ldrh	r3, [r7, #14]	@ movhi
 506 0046 1340     		ands	r3, r3, r2
 507 0048 9BB2     		uxth	r3, r3
 508 004a 002B     		cmp	r3, #0
 509 004c 2BD0     		beq	.L24
 174:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       p_CB->waits  &= p_CB->events;
 510              		.loc 1 174 0
 511 004e 7B68     		ldr	r3, [r7, #4]
 512 0050 5A8B     		ldrh	r2, [r3, #26]
 513 0052 7B68     		ldr	r3, [r7, #4]
 514 0054 1B8B     		ldrh	r3, [r3, #24]
 515 0056 1340     		ands	r3, r3, r2
 516 0058 9AB2     		uxth	r2, r3
 517 005a 7B68     		ldr	r3, [r7, #4]
 518 005c 5A83     		strh	r2, [r3, #26]	@ movhi
 519 005e 00E0     		b	.L26
 520              	.L28:
 168:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       goto rdy;
 521              		.loc 1 168 0
 522 0060 00BF     		nop
 523              	.L26:
 175:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** rdy:  p_CB->events &= ~event_flags;
 524              		.loc 1 175 0
 525 0062 7B68     		ldr	r3, [r7, #4]
 526 0064 1B8B     		ldrh	r3, [r3, #24]
 527 0066 9AB2     		uxth	r2, r3
 528 0068 FB89     		ldrh	r3, [r7, #14]
 529 006a 6FEA0303 		mvn	r3, r3
 530 006e 9BB2     		uxth	r3, r3
 531 0070 1340     		ands	r3, r3, r2
 532 0072 9BB2     		uxth	r3, r3
 533 0074 9AB2     		uxth	r2, r3
 534 0076 7B68     		ldr	r3, [r7, #4]
 535 0078 1A83     		strh	r2, [r3, #24]	@ movhi
 176:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_rmv_dly (p_CB);
 536              		.loc 1 176 0
 537 007a 7868     		ldr	r0, [r7, #4]
 538 007c FFF7FEFF 		bl	rt_rmv_dly
 177:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       p_CB->state   = READY;
 539              		.loc 1 177 0
 540 0080 7B68     		ldr	r3, [r7, #4]
 541 0082 4FF00102 		mov	r2, #1
 542 0086 5A70     		strb	r2, [r3, #1]
 178:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #ifdef __CMSIS_RTOS
 179:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_ret_val2(p_CB, 0x08/*osEventSignal*/, p_CB->waits); 
 543              		.loc 1 179 0
 544 0088 7B68     		ldr	r3, [r7, #4]
 545 008a 5B8B     		ldrh	r3, [r3, #26]
 546 008c 7868     		ldr	r0, [r7, #4]
 547 008e 4FF00801 		mov	r1, #8
 548 0092 1A46     		mov	r2, r3
 549 0094 FFF7FEFF 		bl	rt_ret_val2
 180:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #else
 181:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_ret_val (p_CB, OS_R_EVT);
 182:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** #endif
 183:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****       rt_put_prio (&os_rdy, p_CB);
 550              		.loc 1 183 0
 551 0098 40F20000 		movw	r0, #:lower16:os_rdy
 552 009c C0F20000 		movt	r0, #:upper16:os_rdy
 553 00a0 7968     		ldr	r1, [r7, #4]
 554 00a2 FFF7FEFF 		bl	rt_put_prio
 555              	.L24:
 184:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****     }
 185:../Dave/Generated/src/RTOS001/SRC/rt_Event.c ****   }
 186:../Dave/Generated/src/RTOS001/SRC/rt_Event.c **** }
 556              		.loc 1 186 0
 557 00a6 07F11007 		add	r7, r7, #16
 558 00aa BD46     		mov	sp, r7
 559 00ac 80BD     		pop	{r7, pc}
 560              		.cfi_endproc
 561              	.LFE13:
 563 00ae 00BF     		.text
 564              	.Letext0:
 565              		.file 2 "../Dave/Generated/src/RTOS001/SRC/rt_TypeDef.h"
 566              		.file 3 "../Dave/Generated/src/RTOS001/SRC/RTX_Config.h"
 567              		.file 4 "../Dave/Generated/src/RTOS001/SRC/rt_List.h"
 568              		.file 5 "../Dave/Generated/src/RTOS001/SRC/rt_Task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rt_Event.c
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:20     .text.rt_evt_wait:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:25     .text.rt_evt_wait:00000000 rt_evt_wait
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:159    .text.rt_evt_set:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:164    .text.rt_evt_set:00000000 rt_evt_set
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:292    .text.rt_evt_clr:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:297    .text.rt_evt_clr:00000000 rt_evt_clr
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:355    .text.isr_evt_set:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:360    .text.isr_evt_set:00000000 isr_evt_set
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:412    .text.rt_evt_get:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:417    .text.rt_evt_get:00000000 rt_evt_get
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:445    .text.rt_evt_psh:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\ccqwbFki.s:450    .text.rt_evt_psh:00000000 rt_evt_psh
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.rt_TypeDef.h.79.db0d61ef3f79bbdae3d134fa36f08304
                           .group:00000000 wm4.RTX_Config.h.42.eb93c57b7f787c25a05db70c41047f1a
                           .group:00000000 wm4.rt_List.h.38.eac26046fac8ea42e6920eca3c3ee440
                           .group:00000000 wm4.rt_Task.h.38.ad357e63c89f04311a4b4ec53df91b63
                           .group:00000000 wm4.rt_HAL_CM.h.36.531af519683d77df9d264c8d6c8a6b22

UNDEFINED SYMBOLS
os_tsk
rt_block
os_active_TCB
rt_rmv_dly
rt_ret_val2
rt_dispatch
rt_psq_enq
rt_psh_req
os_rdy
rt_put_prio
