   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"rt_Mutex.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rt_mut_init,"ax",%progbits
  20              		.align	2
  21              		.global	rt_mut_init
  22              		.thumb
  23              		.thumb_func
  25              	rt_mut_init:
  26              	.LFB8:
  27              		.file 1 "../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c"
   1:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** /*----------------------------------------------------------------------------
   2:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *      RL-ARM - RTX
   3:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *----------------------------------------------------------------------------
   4:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *      Name:    RT_MUTEX.C
   5:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *      Purpose: Implements mutex synchronization objects
   6:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *      Rev.:    V4.73
   7:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *----------------------------------------------------------------------------
   8:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *
   9:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  10:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * All rights reserved.
  11:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * Redistribution and use in source and binary forms, with or without
  12:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * modification, are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *  - Redistributions of source code must retain the above copyright
  14:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *    notice, this list of conditions and the following disclaimer.
  15:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *  - Redistributions in binary form must reproduce the above copyright
  16:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *    notice, this list of conditions and the following disclaimer in the
  17:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *    documentation and/or other materials provided with the distribution.
  18:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  19:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *    to endorse or promote products derived from this software without 
  20:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *    specific prior written permission.
  21:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *
  22:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  23:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  24:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  25:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  26:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  27:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  28:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  29:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  30:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  32:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  * POSSIBILITY OF SUCH DAMAGE.
  33:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *---------------------------------------------------------------------------*/
  34:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  35:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #include "rt_TypeDef.h"
  36:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #include "RTX_Config.h"
  37:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #include "rt_List.h"
  38:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #include "rt_Task.h"
  39:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #include "rt_Mutex.h"
  40:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #include "rt_HAL_CM.h"
  41:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  42:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  43:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** /*----------------------------------------------------------------------------
  44:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *      Functions
  45:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****  *---------------------------------------------------------------------------*/
  46:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  47:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  48:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** /*--------------------------- rt_mut_init -----------------------------------*/
  49:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  50:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** void rt_mut_init (OS_ID mutex) {
  28              		.loc 1 50 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 85B0     		sub	sp, sp, #20
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  51:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Initialize a mutex object */
  52:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_MUCB p_MCB = mutex;
  44              		.loc 1 52 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a FB60     		str	r3, [r7, #12]
  53:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  54:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_MCB->cb_type = MUCB;
  47              		.loc 1 54 0
  48 000c FB68     		ldr	r3, [r7, #12]
  49 000e 4FF00302 		mov	r2, #3
  50 0012 1A70     		strb	r2, [r3, #0]
  55:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_MCB->level   = 0;
  51              		.loc 1 55 0
  52 0014 FB68     		ldr	r3, [r7, #12]
  53 0016 4FF00002 		mov	r2, #0
  54 001a 5A80     		strh	r2, [r3, #2]	@ movhi
  56:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_MCB->p_lnk   = NULL;
  55              		.loc 1 56 0
  56 001c FB68     		ldr	r3, [r7, #12]
  57 001e 4FF00002 		mov	r2, #0
  58 0022 5A60     		str	r2, [r3, #4]
  57:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_MCB->owner   = NULL;
  59              		.loc 1 57 0
  60 0024 FB68     		ldr	r3, [r7, #12]
  61 0026 4FF00002 		mov	r2, #0
  62 002a 9A60     		str	r2, [r3, #8]
  58:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_MCB->p_mlnk  = NULL;
  63              		.loc 1 58 0
  64 002c FB68     		ldr	r3, [r7, #12]
  65 002e 4FF00002 		mov	r2, #0
  66 0032 DA60     		str	r2, [r3, #12]
  59:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** }
  67              		.loc 1 59 0
  68 0034 07F11407 		add	r7, r7, #20
  69 0038 BD46     		mov	sp, r7
  70 003a 80BC     		pop	{r7}
  71 003c 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE8:
  75 003e 00BF     		.section	.text.rt_mut_delete,"ax",%progbits
  76              		.align	2
  77              		.global	rt_mut_delete
  78              		.thumb
  79              		.thumb_func
  81              	rt_mut_delete:
  82              	.LFB9:
  60:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  61:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  62:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** /*--------------------------- rt_mut_delete ---------------------------------*/
  63:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  64:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #ifdef __CMSIS_RTOS
  65:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** OS_RESULT rt_mut_delete (OS_ID mutex) {
  83              		.loc 1 65 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 24
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 86B0     		sub	sp, sp, #24
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 32
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI5:
  97              		.cfi_def_cfa_register 7
  98 0006 7860     		str	r0, [r7, #4]
  66:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Delete a mutex object */
  67:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_MUCB p_MCB = mutex;
  99              		.loc 1 67 0
 100 0008 7B68     		ldr	r3, [r7, #4]
 101 000a FB60     		str	r3, [r7, #12]
  68:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_TCB  p_TCB;
  69:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_MUCB p_mlnk;
  70:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   U8     prio;
  71:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  72:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->level != 0) {
 102              		.loc 1 72 0
 103 000c FB68     		ldr	r3, [r7, #12]
 104 000e 5B88     		ldrh	r3, [r3, #2]
 105 0010 002B     		cmp	r3, #0
 106 0012 66D0     		beq	.L16
  73:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  74:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_TCB = p_MCB->owner;
 107              		.loc 1 74 0
 108 0014 FB68     		ldr	r3, [r7, #12]
 109 0016 9B68     		ldr	r3, [r3, #8]
 110 0018 BB60     		str	r3, [r7, #8]
  75:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  76:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* Remove mutex from task mutex owner list. */
  77:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_mlnk = p_TCB->p_mlnk;
 111              		.loc 1 77 0
 112 001a BB68     		ldr	r3, [r7, #8]
 113 001c 1B6A     		ldr	r3, [r3, #32]
 114 001e 7B61     		str	r3, [r7, #20]
  78:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     if (p_mlnk == p_MCB) {
 115              		.loc 1 78 0
 116 0020 7A69     		ldr	r2, [r7, #20]
 117 0022 FB68     		ldr	r3, [r7, #12]
 118 0024 9A42     		cmp	r2, r3
 119 0026 11D1     		bne	.L6
  79:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       p_TCB->p_mlnk = p_MCB->p_mlnk;
 120              		.loc 1 79 0
 121 0028 FB68     		ldr	r3, [r7, #12]
 122 002a DA68     		ldr	r2, [r3, #12]
 123 002c BB68     		ldr	r3, [r7, #8]
 124 002e 1A62     		str	r2, [r3, #32]
 125 0030 0FE0     		b	.L5
 126              	.L8:
  80:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
  81:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     else {
  82:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       while (p_mlnk) {
  83:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         if (p_mlnk->p_mlnk == p_MCB) {
 127              		.loc 1 83 0
 128 0032 7B69     		ldr	r3, [r7, #20]
 129 0034 DA68     		ldr	r2, [r3, #12]
 130 0036 FB68     		ldr	r3, [r7, #12]
 131 0038 9A42     		cmp	r2, r3
 132 003a 04D1     		bne	.L7
  84:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****           p_mlnk->p_mlnk = p_MCB->p_mlnk;
 133              		.loc 1 84 0
 134 003c FB68     		ldr	r3, [r7, #12]
 135 003e DA68     		ldr	r2, [r3, #12]
 136 0040 7B69     		ldr	r3, [r7, #20]
 137 0042 DA60     		str	r2, [r3, #12]
  85:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****           break;
 138              		.loc 1 85 0
 139 0044 05E0     		b	.L5
 140              	.L7:
  86:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         }
  87:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         p_mlnk = p_mlnk->p_mlnk;
 141              		.loc 1 87 0
 142 0046 7B69     		ldr	r3, [r7, #20]
 143 0048 DB68     		ldr	r3, [r3, #12]
 144 004a 7B61     		str	r3, [r7, #20]
 145              	.L6:
  82:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       while (p_mlnk) {
 146              		.loc 1 82 0 discriminator 1
 147 004c 7B69     		ldr	r3, [r7, #20]
 148 004e 002B     		cmp	r3, #0
 149 0050 EFD1     		bne	.L8
 150              	.L5:
  88:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       }
  89:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
  90:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
  91:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* Restore owner task's priority. */
  92:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     prio = p_TCB->prio_base;
 151              		.loc 1 92 0
 152 0052 BB68     		ldr	r3, [r7, #8]
 153 0054 93F82430 		ldrb	r3, [r3, #36]
 154 0058 FB74     		strb	r3, [r7, #19]
  93:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_mlnk = p_TCB->p_mlnk;
 155              		.loc 1 93 0
 156 005a BB68     		ldr	r3, [r7, #8]
 157 005c 1B6A     		ldr	r3, [r3, #32]
 158 005e 7B61     		str	r3, [r7, #20]
  94:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     while (p_mlnk) {
 159              		.loc 1 94 0
 160 0060 10E0     		b	.L9
 161              	.L11:
  95:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       if (p_mlnk->p_lnk && (p_mlnk->p_lnk->prio > prio)) {
 162              		.loc 1 95 0
 163 0062 7B69     		ldr	r3, [r7, #20]
 164 0064 5B68     		ldr	r3, [r3, #4]
 165 0066 002B     		cmp	r3, #0
 166 0068 09D0     		beq	.L10
 167              		.loc 1 95 0 is_stmt 0 discriminator 1
 168 006a 7B69     		ldr	r3, [r7, #20]
 169 006c 5B68     		ldr	r3, [r3, #4]
 170 006e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 171 0070 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 172 0072 9A42     		cmp	r2, r3
 173 0074 03D2     		bcs	.L10
  96:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         /* A task with higher priority is waiting for mutex. */
  97:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         prio = p_mlnk->p_lnk->prio;
 174              		.loc 1 97 0 is_stmt 1
 175 0076 7B69     		ldr	r3, [r7, #20]
 176 0078 5B68     		ldr	r3, [r3, #4]
 177 007a 9B78     		ldrb	r3, [r3, #2]
 178 007c FB74     		strb	r3, [r7, #19]
 179              	.L10:
  98:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       }
  99:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       p_mlnk = p_mlnk->p_mlnk;
 180              		.loc 1 99 0
 181 007e 7B69     		ldr	r3, [r7, #20]
 182 0080 DB68     		ldr	r3, [r3, #12]
 183 0082 7B61     		str	r3, [r7, #20]
 184              	.L9:
  94:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     while (p_mlnk) {
 185              		.loc 1 94 0 discriminator 1
 186 0084 7B69     		ldr	r3, [r7, #20]
 187 0086 002B     		cmp	r3, #0
 188 0088 EBD1     		bne	.L11
 100:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 101:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     if (p_TCB->prio != prio) {
 189              		.loc 1 101 0
 190 008a BB68     		ldr	r3, [r7, #8]
 191 008c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 192 008e FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 193 0090 9A42     		cmp	r2, r3
 194 0092 26D0     		beq	.L16
 102:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       p_TCB->prio = prio;
 195              		.loc 1 102 0
 196 0094 BB68     		ldr	r3, [r7, #8]
 197 0096 FA7C     		ldrb	r2, [r7, #19]
 198 0098 9A70     		strb	r2, [r3, #2]
 103:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       if (p_TCB != os_tsk.run) {
 199              		.loc 1 103 0
 200 009a 40F20003 		movw	r3, #:lower16:os_tsk
 201 009e C0F20003 		movt	r3, #:upper16:os_tsk
 202 00a2 1A68     		ldr	r2, [r3, #0]
 203 00a4 BB68     		ldr	r3, [r7, #8]
 204 00a6 9A42     		cmp	r2, r3
 205 00a8 1BD0     		beq	.L16
 104:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         rt_resort_prio (p_TCB);
 206              		.loc 1 104 0
 207 00aa B868     		ldr	r0, [r7, #8]
 208 00ac FFF7FEFF 		bl	rt_resort_prio
 105:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       }
 106:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 107:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 108:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 109:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 110:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   while (p_MCB->p_lnk != NULL) {
 209              		.loc 1 110 0
 210 00b0 17E0     		b	.L16
 211              	.L13:
 111:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* A task is waiting for mutex. */
 112:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_TCB = rt_get_first ((P_XCB)p_MCB);
 212              		.loc 1 112 0
 213 00b2 F868     		ldr	r0, [r7, #12]
 214 00b4 FFF7FEFF 		bl	rt_get_first
 215 00b8 B860     		str	r0, [r7, #8]
 113:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_ret_val(p_TCB, 0/*osOK*/);
 216              		.loc 1 113 0
 217 00ba B868     		ldr	r0, [r7, #8]
 218 00bc 4FF00001 		mov	r1, #0
 219 00c0 FFF7FEFF 		bl	rt_ret_val
 114:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_rmv_dly(p_TCB);
 220              		.loc 1 114 0
 221 00c4 B868     		ldr	r0, [r7, #8]
 222 00c6 FFF7FEFF 		bl	rt_rmv_dly
 115:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_TCB->state = READY;
 223              		.loc 1 115 0
 224 00ca BB68     		ldr	r3, [r7, #8]
 225 00cc 4FF00102 		mov	r2, #1
 226 00d0 5A70     		strb	r2, [r3, #1]
 116:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_put_prio (&os_rdy, p_TCB);
 227              		.loc 1 116 0
 228 00d2 40F20000 		movw	r0, #:lower16:os_rdy
 229 00d6 C0F20000 		movt	r0, #:upper16:os_rdy
 230 00da B968     		ldr	r1, [r7, #8]
 231 00dc FFF7FEFF 		bl	rt_put_prio
 232 00e0 00E0     		b	.L12
 233              	.L16:
 110:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   while (p_MCB->p_lnk != NULL) {
 234              		.loc 1 110 0
 235 00e2 00BF     		nop
 236              	.L12:
 110:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   while (p_MCB->p_lnk != NULL) {
 237              		.loc 1 110 0 is_stmt 0 discriminator 1
 238 00e4 FB68     		ldr	r3, [r7, #12]
 239 00e6 5B68     		ldr	r3, [r3, #4]
 240 00e8 002B     		cmp	r3, #0
 241 00ea E2D1     		bne	.L13
 117:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 118:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 119:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (os_rdy.p_lnk && (os_rdy.p_lnk->prio > os_tsk.run->prio)) {
 242              		.loc 1 119 0 is_stmt 1
 243 00ec 40F20003 		movw	r3, #:lower16:os_rdy
 244 00f0 C0F20003 		movt	r3, #:upper16:os_rdy
 245 00f4 5B68     		ldr	r3, [r3, #4]
 246 00f6 002B     		cmp	r3, #0
 247 00f8 25D0     		beq	.L14
 248              		.loc 1 119 0 is_stmt 0 discriminator 1
 249 00fa 40F20003 		movw	r3, #:lower16:os_rdy
 250 00fe C0F20003 		movt	r3, #:upper16:os_rdy
 251 0102 5B68     		ldr	r3, [r3, #4]
 252 0104 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 253 0106 40F20003 		movw	r3, #:lower16:os_tsk
 254 010a C0F20003 		movt	r3, #:upper16:os_tsk
 255 010e 1B68     		ldr	r3, [r3, #0]
 256 0110 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 257 0112 9A42     		cmp	r2, r3
 258 0114 17D9     		bls	.L14
 120:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* preempt running task */
 121:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_put_prio (&os_rdy, os_tsk.run);
 259              		.loc 1 121 0 is_stmt 1
 260 0116 40F20003 		movw	r3, #:lower16:os_tsk
 261 011a C0F20003 		movt	r3, #:upper16:os_tsk
 262 011e 1B68     		ldr	r3, [r3, #0]
 263 0120 40F20000 		movw	r0, #:lower16:os_rdy
 264 0124 C0F20000 		movt	r0, #:upper16:os_rdy
 265 0128 1946     		mov	r1, r3
 266 012a FFF7FEFF 		bl	rt_put_prio
 122:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     os_tsk.run->state = READY;
 267              		.loc 1 122 0
 268 012e 40F20003 		movw	r3, #:lower16:os_tsk
 269 0132 C0F20003 		movt	r3, #:upper16:os_tsk
 270 0136 1B68     		ldr	r3, [r3, #0]
 271 0138 4FF00102 		mov	r2, #1
 272 013c 5A70     		strb	r2, [r3, #1]
 123:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_dispatch (NULL);
 273              		.loc 1 123 0
 274 013e 4FF00000 		mov	r0, #0
 275 0142 FFF7FEFF 		bl	rt_dispatch
 276              	.L14:
 124:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 125:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 126:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_MCB->cb_type = 0;
 277              		.loc 1 126 0
 278 0146 FB68     		ldr	r3, [r7, #12]
 279 0148 4FF00002 		mov	r2, #0
 280 014c 1A70     		strb	r2, [r3, #0]
 127:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 128:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   return (OS_R_OK);
 281              		.loc 1 128 0
 282 014e 4FF00003 		mov	r3, #0
 129:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** }
 283              		.loc 1 129 0
 284 0152 1846     		mov	r0, r3
 285 0154 07F11807 		add	r7, r7, #24
 286 0158 BD46     		mov	sp, r7
 287 015a 80BD     		pop	{r7, pc}
 288              		.cfi_endproc
 289              	.LFE9:
 291              		.section	.text.rt_mut_release,"ax",%progbits
 292              		.align	2
 293              		.global	rt_mut_release
 294              		.thumb
 295              		.thumb_func
 297              	rt_mut_release:
 298              	.LFB10:
 130:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #endif
 131:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 132:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 133:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** /*--------------------------- rt_mut_release --------------------------------*/
 134:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 135:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** OS_RESULT rt_mut_release (OS_ID mutex) {
 299              		.loc 1 135 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 24
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              	.LCFI6:
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 0002 86B0     		sub	sp, sp, #24
 309              	.LCFI7:
 310              		.cfi_def_cfa_offset 32
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI8:
 313              		.cfi_def_cfa_register 7
 314 0006 7860     		str	r0, [r7, #4]
 136:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Release a mutex object */
 137:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_MUCB p_MCB = mutex;
 315              		.loc 1 137 0
 316 0008 7B68     		ldr	r3, [r7, #4]
 317 000a FB60     		str	r3, [r7, #12]
 138:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_TCB  p_TCB;
 139:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_MUCB p_mlnk;
 140:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   U8     prio;
 141:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 142:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->level == 0 || p_MCB->owner != os_tsk.run) {
 318              		.loc 1 142 0
 319 000c FB68     		ldr	r3, [r7, #12]
 320 000e 5B88     		ldrh	r3, [r3, #2]
 321 0010 002B     		cmp	r3, #0
 322 0012 08D0     		beq	.L18
 323              		.loc 1 142 0 is_stmt 0 discriminator 1
 324 0014 FB68     		ldr	r3, [r7, #12]
 325 0016 9A68     		ldr	r2, [r3, #8]
 326 0018 40F20003 		movw	r3, #:lower16:os_tsk
 327 001c C0F20003 		movt	r3, #:upper16:os_tsk
 328 0020 1B68     		ldr	r3, [r3, #0]
 329 0022 9A42     		cmp	r2, r3
 330 0024 02D0     		beq	.L19
 331              	.L18:
 143:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* Unbalanced mutex release or task is not the owner */
 144:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     return (OS_R_NOK);
 332              		.loc 1 144 0 is_stmt 1
 333 0026 4FF0FF03 		mov	r3, #255
 334 002a D8E0     		b	.L20
 335              	.L19:
 145:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 146:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (--p_MCB->level != 0) {
 336              		.loc 1 146 0
 337 002c FB68     		ldr	r3, [r7, #12]
 338 002e 5B88     		ldrh	r3, [r3, #2]
 339 0030 03F1FF33 		add	r3, r3, #-1
 340 0034 9AB2     		uxth	r2, r3
 341 0036 FB68     		ldr	r3, [r7, #12]
 342 0038 5A80     		strh	r2, [r3, #2]	@ movhi
 343 003a FB68     		ldr	r3, [r7, #12]
 344 003c 5B88     		ldrh	r3, [r3, #2]
 345 003e 002B     		cmp	r3, #0
 346 0040 02D0     		beq	.L21
 147:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     return (OS_R_OK);
 347              		.loc 1 147 0
 348 0042 4FF00003 		mov	r3, #0
 349 0046 CAE0     		b	.L20
 350              	.L21:
 148:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 149:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 150:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Remove mutex from task mutex owner list. */
 151:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_mlnk = os_tsk.run->p_mlnk;
 351              		.loc 1 151 0
 352 0048 40F20003 		movw	r3, #:lower16:os_tsk
 353 004c C0F20003 		movt	r3, #:upper16:os_tsk
 354 0050 1B68     		ldr	r3, [r3, #0]
 355 0052 1B6A     		ldr	r3, [r3, #32]
 356 0054 7B61     		str	r3, [r7, #20]
 152:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_mlnk == p_MCB) {
 357              		.loc 1 152 0
 358 0056 7A69     		ldr	r2, [r7, #20]
 359 0058 FB68     		ldr	r3, [r7, #12]
 360 005a 9A42     		cmp	r2, r3
 361 005c 15D1     		bne	.L24
 153:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     os_tsk.run->p_mlnk = p_MCB->p_mlnk;
 362              		.loc 1 153 0
 363 005e 40F20003 		movw	r3, #:lower16:os_tsk
 364 0062 C0F20003 		movt	r3, #:upper16:os_tsk
 365 0066 1B68     		ldr	r3, [r3, #0]
 366 0068 FA68     		ldr	r2, [r7, #12]
 367 006a D268     		ldr	r2, [r2, #12]
 368 006c 1A62     		str	r2, [r3, #32]
 369 006e 0FE0     		b	.L23
 370              	.L26:
 154:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 155:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   else {
 156:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     while (p_mlnk) {
 157:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       if (p_mlnk->p_mlnk == p_MCB) {
 371              		.loc 1 157 0
 372 0070 7B69     		ldr	r3, [r7, #20]
 373 0072 DA68     		ldr	r2, [r3, #12]
 374 0074 FB68     		ldr	r3, [r7, #12]
 375 0076 9A42     		cmp	r2, r3
 376 0078 04D1     		bne	.L25
 158:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         p_mlnk->p_mlnk = p_MCB->p_mlnk;
 377              		.loc 1 158 0
 378 007a FB68     		ldr	r3, [r7, #12]
 379 007c DA68     		ldr	r2, [r3, #12]
 380 007e 7B69     		ldr	r3, [r7, #20]
 381 0080 DA60     		str	r2, [r3, #12]
 159:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****         break;
 382              		.loc 1 159 0
 383 0082 05E0     		b	.L23
 384              	.L25:
 160:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       }
 161:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       p_mlnk = p_mlnk->p_mlnk;
 385              		.loc 1 161 0
 386 0084 7B69     		ldr	r3, [r7, #20]
 387 0086 DB68     		ldr	r3, [r3, #12]
 388 0088 7B61     		str	r3, [r7, #20]
 389              	.L24:
 156:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     while (p_mlnk) {
 390              		.loc 1 156 0 discriminator 1
 391 008a 7B69     		ldr	r3, [r7, #20]
 392 008c 002B     		cmp	r3, #0
 393 008e EFD1     		bne	.L26
 394              	.L23:
 162:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 163:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 164:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 165:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Restore owner task's priority. */
 166:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   prio = os_tsk.run->prio_base;
 395              		.loc 1 166 0
 396 0090 40F20003 		movw	r3, #:lower16:os_tsk
 397 0094 C0F20003 		movt	r3, #:upper16:os_tsk
 398 0098 1B68     		ldr	r3, [r3, #0]
 399 009a 93F82430 		ldrb	r3, [r3, #36]
 400 009e FB74     		strb	r3, [r7, #19]
 167:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   p_mlnk = os_tsk.run->p_mlnk;
 401              		.loc 1 167 0
 402 00a0 40F20003 		movw	r3, #:lower16:os_tsk
 403 00a4 C0F20003 		movt	r3, #:upper16:os_tsk
 404 00a8 1B68     		ldr	r3, [r3, #0]
 405 00aa 1B6A     		ldr	r3, [r3, #32]
 406 00ac 7B61     		str	r3, [r7, #20]
 168:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   while (p_mlnk) {
 407              		.loc 1 168 0
 408 00ae 10E0     		b	.L27
 409              	.L29:
 169:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     if (p_mlnk->p_lnk && (p_mlnk->p_lnk->prio > prio)) {
 410              		.loc 1 169 0
 411 00b0 7B69     		ldr	r3, [r7, #20]
 412 00b2 5B68     		ldr	r3, [r3, #4]
 413 00b4 002B     		cmp	r3, #0
 414 00b6 09D0     		beq	.L28
 415              		.loc 1 169 0 is_stmt 0 discriminator 1
 416 00b8 7B69     		ldr	r3, [r7, #20]
 417 00ba 5B68     		ldr	r3, [r3, #4]
 418 00bc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 419 00be FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 420 00c0 9A42     		cmp	r2, r3
 421 00c2 03D2     		bcs	.L28
 170:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       /* A task with higher priority is waiting for mutex. */
 171:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       prio = p_mlnk->p_lnk->prio;
 422              		.loc 1 171 0 is_stmt 1
 423 00c4 7B69     		ldr	r3, [r7, #20]
 424 00c6 5B68     		ldr	r3, [r3, #4]
 425 00c8 9B78     		ldrb	r3, [r3, #2]
 426 00ca FB74     		strb	r3, [r7, #19]
 427              	.L28:
 172:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 173:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_mlnk = p_mlnk->p_mlnk;
 428              		.loc 1 173 0
 429 00cc 7B69     		ldr	r3, [r7, #20]
 430 00ce DB68     		ldr	r3, [r3, #12]
 431 00d0 7B61     		str	r3, [r7, #20]
 432              	.L27:
 168:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   while (p_mlnk) {
 433              		.loc 1 168 0 discriminator 1
 434 00d2 7B69     		ldr	r3, [r7, #20]
 435 00d4 002B     		cmp	r3, #0
 436 00d6 EBD1     		bne	.L29
 174:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 175:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   os_tsk.run->prio = prio;
 437              		.loc 1 175 0
 438 00d8 40F20003 		movw	r3, #:lower16:os_tsk
 439 00dc C0F20003 		movt	r3, #:upper16:os_tsk
 440 00e0 1B68     		ldr	r3, [r3, #0]
 441 00e2 FA7C     		ldrb	r2, [r7, #19]
 442 00e4 9A70     		strb	r2, [r3, #2]
 176:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 177:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->p_lnk != NULL) {
 443              		.loc 1 177 0
 444 00e6 FB68     		ldr	r3, [r7, #12]
 445 00e8 5B68     		ldr	r3, [r3, #4]
 446 00ea 002B     		cmp	r3, #0
 447 00ec 4FD0     		beq	.L30
 178:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* A task is waiting for mutex. */
 179:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_TCB = rt_get_first ((P_XCB)p_MCB);
 448              		.loc 1 179 0
 449 00ee F868     		ldr	r0, [r7, #12]
 450 00f0 FFF7FEFF 		bl	rt_get_first
 451 00f4 B860     		str	r0, [r7, #8]
 180:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #ifdef __CMSIS_RTOS
 181:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_ret_val(p_TCB, 0/*osOK*/);
 452              		.loc 1 181 0
 453 00f6 B868     		ldr	r0, [r7, #8]
 454 00f8 4FF00001 		mov	r1, #0
 455 00fc FFF7FEFF 		bl	rt_ret_val
 182:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #else
 183:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_ret_val(p_TCB, OS_R_MUT); 
 184:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** #endif
 185:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_rmv_dly (p_TCB);
 456              		.loc 1 185 0
 457 0100 B868     		ldr	r0, [r7, #8]
 458 0102 FFF7FEFF 		bl	rt_rmv_dly
 186:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* A waiting task becomes the owner of this mutex. */
 187:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->level  = 1;
 459              		.loc 1 187 0
 460 0106 FB68     		ldr	r3, [r7, #12]
 461 0108 4FF00102 		mov	r2, #1
 462 010c 5A80     		strh	r2, [r3, #2]	@ movhi
 188:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->owner  = p_TCB;
 463              		.loc 1 188 0
 464 010e FB68     		ldr	r3, [r7, #12]
 465 0110 BA68     		ldr	r2, [r7, #8]
 466 0112 9A60     		str	r2, [r3, #8]
 189:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->p_mlnk = p_TCB->p_mlnk;
 467              		.loc 1 189 0
 468 0114 BB68     		ldr	r3, [r7, #8]
 469 0116 1A6A     		ldr	r2, [r3, #32]
 470 0118 FB68     		ldr	r3, [r7, #12]
 471 011a DA60     		str	r2, [r3, #12]
 190:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_TCB->p_mlnk = p_MCB; 
 472              		.loc 1 190 0
 473 011c BB68     		ldr	r3, [r7, #8]
 474 011e FA68     		ldr	r2, [r7, #12]
 475 0120 1A62     		str	r2, [r3, #32]
 191:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* Priority inversion, check which task continues. */
 192:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     if (os_tsk.run->prio >= rt_rdy_prio()) {
 476              		.loc 1 192 0
 477 0122 40F20003 		movw	r3, #:lower16:os_tsk
 478 0126 C0F20003 		movt	r3, #:upper16:os_tsk
 479 012a 1B68     		ldr	r3, [r3, #0]
 480 012c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 481 012e 40F20003 		movw	r3, #:lower16:os_rdy
 482 0132 C0F20003 		movt	r3, #:upper16:os_rdy
 483 0136 5B68     		ldr	r3, [r3, #4]
 484 0138 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 485 013a 9A42     		cmp	r2, r3
 486 013c 03D3     		bcc	.L31
 193:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       rt_dispatch (p_TCB);
 487              		.loc 1 193 0
 488 013e B868     		ldr	r0, [r7, #8]
 489 0140 FFF7FEFF 		bl	rt_dispatch
 490 0144 49E0     		b	.L32
 491              	.L31:
 194:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 195:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     else {
 196:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       /* Ready task has higher priority than running task. */
 197:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       rt_put_prio (&os_rdy, os_tsk.run);
 492              		.loc 1 197 0
 493 0146 40F20003 		movw	r3, #:lower16:os_tsk
 494 014a C0F20003 		movt	r3, #:upper16:os_tsk
 495 014e 1B68     		ldr	r3, [r3, #0]
 496 0150 40F20000 		movw	r0, #:lower16:os_rdy
 497 0154 C0F20000 		movt	r0, #:upper16:os_rdy
 498 0158 1946     		mov	r1, r3
 499 015a FFF7FEFF 		bl	rt_put_prio
 198:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       rt_put_prio (&os_rdy, p_TCB);
 500              		.loc 1 198 0
 501 015e 40F20000 		movw	r0, #:lower16:os_rdy
 502 0162 C0F20000 		movt	r0, #:upper16:os_rdy
 503 0166 B968     		ldr	r1, [r7, #8]
 504 0168 FFF7FEFF 		bl	rt_put_prio
 199:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       os_tsk.run->state = READY;
 505              		.loc 1 199 0
 506 016c 40F20003 		movw	r3, #:lower16:os_tsk
 507 0170 C0F20003 		movt	r3, #:upper16:os_tsk
 508 0174 1B68     		ldr	r3, [r3, #0]
 509 0176 4FF00102 		mov	r2, #1
 510 017a 5A70     		strb	r2, [r3, #1]
 200:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       p_TCB->state      = READY;
 511              		.loc 1 200 0
 512 017c BB68     		ldr	r3, [r7, #8]
 513 017e 4FF00102 		mov	r2, #1
 514 0182 5A70     		strb	r2, [r3, #1]
 201:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       rt_dispatch (NULL);
 515              		.loc 1 201 0
 516 0184 4FF00000 		mov	r0, #0
 517 0188 FFF7FEFF 		bl	rt_dispatch
 518 018c 25E0     		b	.L32
 519              	.L30:
 202:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 203:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 204:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   else {
 205:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* Check if own priority lowered by priority inversion. */
 206:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     if (rt_rdy_prio() > os_tsk.run->prio) {
 520              		.loc 1 206 0
 521 018e 40F20003 		movw	r3, #:lower16:os_rdy
 522 0192 C0F20003 		movt	r3, #:upper16:os_rdy
 523 0196 5B68     		ldr	r3, [r3, #4]
 524 0198 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 525 019a 40F20003 		movw	r3, #:lower16:os_tsk
 526 019e C0F20003 		movt	r3, #:upper16:os_tsk
 527 01a2 1B68     		ldr	r3, [r3, #0]
 528 01a4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 529 01a6 9A42     		cmp	r2, r3
 530 01a8 17D9     		bls	.L32
 207:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       rt_put_prio (&os_rdy, os_tsk.run);
 531              		.loc 1 207 0
 532 01aa 40F20003 		movw	r3, #:lower16:os_tsk
 533 01ae C0F20003 		movt	r3, #:upper16:os_tsk
 534 01b2 1B68     		ldr	r3, [r3, #0]
 535 01b4 40F20000 		movw	r0, #:lower16:os_rdy
 536 01b8 C0F20000 		movt	r0, #:upper16:os_rdy
 537 01bc 1946     		mov	r1, r3
 538 01be FFF7FEFF 		bl	rt_put_prio
 208:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       os_tsk.run->state = READY;
 539              		.loc 1 208 0
 540 01c2 40F20003 		movw	r3, #:lower16:os_tsk
 541 01c6 C0F20003 		movt	r3, #:upper16:os_tsk
 542 01ca 1B68     		ldr	r3, [r3, #0]
 543 01cc 4FF00102 		mov	r2, #1
 544 01d0 5A70     		strb	r2, [r3, #1]
 209:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****       rt_dispatch (NULL);
 545              		.loc 1 209 0
 546 01d2 4FF00000 		mov	r0, #0
 547 01d6 FFF7FEFF 		bl	rt_dispatch
 548              	.L32:
 210:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     }
 211:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 212:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   return (OS_R_OK);
 549              		.loc 1 212 0
 550 01da 4FF00003 		mov	r3, #0
 551              	.L20:
 213:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** }
 552              		.loc 1 213 0
 553 01de 1846     		mov	r0, r3
 554 01e0 07F11807 		add	r7, r7, #24
 555 01e4 BD46     		mov	sp, r7
 556 01e6 80BD     		pop	{r7, pc}
 557              		.cfi_endproc
 558              	.LFE10:
 560              		.section	.text.rt_mut_wait,"ax",%progbits
 561              		.align	2
 562              		.global	rt_mut_wait
 563              		.thumb
 564              		.thumb_func
 566              	rt_mut_wait:
 567              	.LFB11:
 214:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 215:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 216:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** /*--------------------------- rt_mut_wait -----------------------------------*/
 217:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 218:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** OS_RESULT rt_mut_wait (OS_ID mutex, U16 timeout) {
 568              		.loc 1 218 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 16
 571              		@ frame_needed = 1, uses_anonymous_args = 0
 572 0000 80B5     		push	{r7, lr}
 573              	.LCFI9:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 7, -8
 576              		.cfi_offset 14, -4
 577 0002 84B0     		sub	sp, sp, #16
 578              	.LCFI10:
 579              		.cfi_def_cfa_offset 24
 580 0004 00AF     		add	r7, sp, #0
 581              	.LCFI11:
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 584 0008 0B46     		mov	r3, r1
 585 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 219:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Wait for a mutex, continue when mutex is free. */
 220:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   P_MUCB p_MCB = mutex;
 586              		.loc 1 220 0
 587 000c 7B68     		ldr	r3, [r7, #4]
 588 000e FB60     		str	r3, [r7, #12]
 221:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** 
 222:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->level == 0) {
 589              		.loc 1 222 0
 590 0010 FB68     		ldr	r3, [r7, #12]
 591 0012 5B88     		ldrh	r3, [r3, #2]
 592 0014 002B     		cmp	r3, #0
 593 0016 16D1     		bne	.L34
 223:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->owner  = os_tsk.run;
 594              		.loc 1 223 0
 595 0018 40F20003 		movw	r3, #:lower16:os_tsk
 596 001c C0F20003 		movt	r3, #:upper16:os_tsk
 597 0020 1A68     		ldr	r2, [r3, #0]
 598 0022 FB68     		ldr	r3, [r7, #12]
 599 0024 9A60     		str	r2, [r3, #8]
 224:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->p_mlnk = os_tsk.run->p_mlnk;
 600              		.loc 1 224 0
 601 0026 40F20003 		movw	r3, #:lower16:os_tsk
 602 002a C0F20003 		movt	r3, #:upper16:os_tsk
 603 002e 1B68     		ldr	r3, [r3, #0]
 604 0030 1A6A     		ldr	r2, [r3, #32]
 605 0032 FB68     		ldr	r3, [r7, #12]
 606 0034 DA60     		str	r2, [r3, #12]
 225:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     os_tsk.run->p_mlnk = p_MCB; 
 607              		.loc 1 225 0
 608 0036 40F20003 		movw	r3, #:lower16:os_tsk
 609 003a C0F20003 		movt	r3, #:upper16:os_tsk
 610 003e 1B68     		ldr	r3, [r3, #0]
 611 0040 FA68     		ldr	r2, [r7, #12]
 612 0042 1A62     		str	r2, [r3, #32]
 226:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     goto inc;
 613              		.loc 1 226 0
 614 0044 08E0     		b	.L35
 615              	.L34:
 227:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 228:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->owner == os_tsk.run) {
 616              		.loc 1 228 0
 617 0046 FB68     		ldr	r3, [r7, #12]
 618 0048 9A68     		ldr	r2, [r3, #8]
 619 004a 40F20003 		movw	r3, #:lower16:os_tsk
 620 004e C0F20003 		movt	r3, #:upper16:os_tsk
 621 0052 1B68     		ldr	r3, [r3, #0]
 622 0054 9A42     		cmp	r2, r3
 623 0056 09D1     		bne	.L36
 624              	.L35:
 229:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     /* OK, running task is the owner of this mutex. */
 230:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** inc:p_MCB->level++;
 625              		.loc 1 230 0
 626 0058 FB68     		ldr	r3, [r7, #12]
 627 005a 5B88     		ldrh	r3, [r3, #2]
 628 005c 03F10103 		add	r3, r3, #1
 629 0060 9AB2     		uxth	r2, r3
 630 0062 FB68     		ldr	r3, [r7, #12]
 631 0064 5A80     		strh	r2, [r3, #2]	@ movhi
 231:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     return (OS_R_OK);
 632              		.loc 1 231 0
 633 0066 4FF00003 		mov	r3, #0
 634 006a 4AE0     		b	.L37
 635              	.L36:
 232:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 233:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Mutex owned by another task, wait until released. */
 234:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (timeout == 0) {
 636              		.loc 1 234 0
 637 006c 7B88     		ldrh	r3, [r7, #2]
 638 006e 002B     		cmp	r3, #0
 639 0070 02D1     		bne	.L38
 235:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     return (OS_R_TMO);
 640              		.loc 1 235 0
 641 0072 4FF00103 		mov	r3, #1
 642 0076 44E0     		b	.L37
 643              	.L38:
 236:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 237:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* Raise the owner task priority if lower than current priority. */
 238:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   /* This priority inversion is called priority inheritance.       */
 239:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->owner->prio < os_tsk.run->prio) {
 644              		.loc 1 239 0
 645 0078 FB68     		ldr	r3, [r7, #12]
 646 007a 9B68     		ldr	r3, [r3, #8]
 647 007c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 648 007e 40F20003 		movw	r3, #:lower16:os_tsk
 649 0082 C0F20003 		movt	r3, #:upper16:os_tsk
 650 0086 1B68     		ldr	r3, [r3, #0]
 651 0088 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 652 008a 9A42     		cmp	r2, r3
 653 008c 0DD2     		bcs	.L39
 240:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->owner->prio = os_tsk.run->prio;
 654              		.loc 1 240 0
 655 008e FB68     		ldr	r3, [r7, #12]
 656 0090 9A68     		ldr	r2, [r3, #8]
 657 0092 40F20003 		movw	r3, #:lower16:os_tsk
 658 0096 C0F20003 		movt	r3, #:upper16:os_tsk
 659 009a 1B68     		ldr	r3, [r3, #0]
 660 009c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 661 009e 9370     		strb	r3, [r2, #2]
 241:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_resort_prio (p_MCB->owner);
 662              		.loc 1 241 0
 663 00a0 FB68     		ldr	r3, [r7, #12]
 664 00a2 9B68     		ldr	r3, [r3, #8]
 665 00a4 1846     		mov	r0, r3
 666 00a6 FFF7FEFF 		bl	rt_resort_prio
 667              	.L39:
 242:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 243:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   if (p_MCB->p_lnk != NULL) {
 668              		.loc 1 243 0
 669 00aa FB68     		ldr	r3, [r7, #12]
 670 00ac 5B68     		ldr	r3, [r3, #4]
 671 00ae 002B     		cmp	r3, #0
 672 00b0 09D0     		beq	.L40
 244:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
 673              		.loc 1 244 0
 674 00b2 40F20003 		movw	r3, #:lower16:os_tsk
 675 00b6 C0F20003 		movt	r3, #:upper16:os_tsk
 676 00ba 1B68     		ldr	r3, [r3, #0]
 677 00bc F868     		ldr	r0, [r7, #12]
 678 00be 1946     		mov	r1, r3
 679 00c0 FFF7FEFF 		bl	rt_put_prio
 680 00c4 15E0     		b	.L41
 681              	.L40:
 245:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 246:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   else {
 247:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     p_MCB->p_lnk = os_tsk.run;
 682              		.loc 1 247 0
 683 00c6 40F20003 		movw	r3, #:lower16:os_tsk
 684 00ca C0F20003 		movt	r3, #:upper16:os_tsk
 685 00ce 1A68     		ldr	r2, [r3, #0]
 686 00d0 FB68     		ldr	r3, [r7, #12]
 687 00d2 5A60     		str	r2, [r3, #4]
 248:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     os_tsk.run->p_lnk  = NULL;
 688              		.loc 1 248 0
 689 00d4 40F20003 		movw	r3, #:lower16:os_tsk
 690 00d8 C0F20003 		movt	r3, #:upper16:os_tsk
 691 00dc 1B68     		ldr	r3, [r3, #0]
 692 00de 4FF00002 		mov	r2, #0
 693 00e2 5A60     		str	r2, [r3, #4]
 249:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****     os_tsk.run->p_rlnk = (P_TCB)p_MCB;
 694              		.loc 1 249 0
 695 00e4 40F20003 		movw	r3, #:lower16:os_tsk
 696 00e8 C0F20003 		movt	r3, #:upper16:os_tsk
 697 00ec 1B68     		ldr	r3, [r3, #0]
 698 00ee FA68     		ldr	r2, [r7, #12]
 699 00f0 9A60     		str	r2, [r3, #8]
 700              	.L41:
 250:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   }
 251:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   rt_block(timeout, WAIT_MUT);
 701              		.loc 1 251 0
 702 00f2 7B88     		ldrh	r3, [r7, #2]
 703 00f4 1846     		mov	r0, r3
 704 00f6 4FF00901 		mov	r1, #9
 705 00fa FFF7FEFF 		bl	rt_block
 252:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c ****   return (OS_R_TMO);
 706              		.loc 1 252 0
 707 00fe 4FF00103 		mov	r3, #1
 708              	.L37:
 253:../Dave/Generated/src/RTOS001/SRC/rt_Mutex.c **** }
 709              		.loc 1 253 0
 710 0102 1846     		mov	r0, r3
 711 0104 07F11007 		add	r7, r7, #16
 712 0108 BD46     		mov	sp, r7
 713 010a 80BD     		pop	{r7, pc}
 714              		.cfi_endproc
 715              	.LFE11:
 717              		.text
 718              	.Letext0:
 719              		.file 2 "../Dave/Generated/src/RTOS001/SRC/rt_TypeDef.h"
 720              		.file 3 "../Dave/Generated/src/RTOS001/SRC/RTX_Config.h"
 721              		.file 4 "../Dave/Generated/src/RTOS001/SRC/rt_List.h"
 722              		.file 5 "../Dave/Generated/src/RTOS001/SRC/rt_Task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rt_Mutex.c
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:20     .text.rt_mut_init:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:25     .text.rt_mut_init:00000000 rt_mut_init
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:76     .text.rt_mut_delete:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:81     .text.rt_mut_delete:00000000 rt_mut_delete
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:292    .text.rt_mut_release:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:297    .text.rt_mut_release:00000000 rt_mut_release
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:561    .text.rt_mut_wait:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc55tpyz.s:566    .text.rt_mut_wait:00000000 rt_mut_wait
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.rt_TypeDef.h.79.db0d61ef3f79bbdae3d134fa36f08304
                           .group:00000000 wm4.RTX_Config.h.42.eb93c57b7f787c25a05db70c41047f1a
                           .group:00000000 wm4.rt_List.h.38.eac26046fac8ea42e6920eca3c3ee440
                           .group:00000000 wm4.rt_Task.h.38.ad357e63c89f04311a4b4ec53df91b63
                           .group:00000000 wm4.rt_HAL_CM.h.36.531af519683d77df9d264c8d6c8a6b22

UNDEFINED SYMBOLS
os_tsk
rt_resort_prio
rt_get_first
rt_ret_val
rt_rmv_dly
os_rdy
rt_put_prio
rt_dispatch
rt_block
