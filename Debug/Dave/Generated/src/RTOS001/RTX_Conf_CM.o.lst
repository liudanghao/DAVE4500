   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"RTX_Conf_CM.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.os_idle_demon,"ax",%progbits
  20              		.align	2
  21              		.global	os_idle_demon
  22              		.thumb
  23              		.thumb_func
  25              	os_idle_demon:
  26              	.LFB0:
  27              		.file 1 "../Dave/Generated/src/RTOS001/RTX_Conf_CM.c"
   1:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*******************************************************************************
   2:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** **  DAVE App Name : RTOS001       App Version: 1.0.24               
   3:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** *******************************************************************************/
   6:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
   7:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
   8:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*----------------------------------------------------------------------------
   9:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      RL-ARM - RTX
  10:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *----------------------------------------------------------------------------
  11:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      Name:    RTX_Conf_CM.C
  12:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      Purpose: Configuration of CMSIS RTX Kernel for Cortex-M
  13:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      Rev.:    V4.74
  14:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *----------------------------------------------------------------------------
  15:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *
  16:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * Copyright (c) 1999-2009 KEIL, 2009-2013 ARM Germany GmbH
  17:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * All rights reserved.
  18:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * Redistribution and use in source and binary forms, with or without
  19:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * modification, are permitted provided that the following conditions are met:
  20:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *  - Redistributions of source code must retain the above copyright
  21:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *    notice, this list of conditions and the following disclaimer.
  22:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *  - Redistributions in binary form must reproduce the above copyright
  23:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *    notice, this list of conditions and the following disclaimer in the
  24:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *    documentation and/or other materials provided with the distribution.
  25:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *  - Neither the name of ARM  nor the names of its contributors may be used 
  26:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *    to endorse or promote products derived from this software without 
  27:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *    specific prior written permission.
  28:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *
  29:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
  30:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
  31:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  32:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  33:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  34:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
  35:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  36:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  37:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  38:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *---------------------------------------------------------------------------*/
  41:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  42:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #include "INC/cmsis_os.h"
  43:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  44:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  45:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*----------------------------------------------------------------------------
  46:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      RTX User configuration part BEGIN
  47:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *---------------------------------------------------------------------------*/
  48:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  49:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //-------- <<< Use Configuration Wizard in Context Menu >>> -----------------
  50:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //
  51:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // <h>Thread Configuration
  52:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // =======================
  53:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //
  54:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Number of concurrent running user threads <1-250>
  55:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines max. number of user threads that will run at the same time.
  56:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 6
  57:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_TASKCNT
  58:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_TASKCNT     7
  59:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
  60:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  61:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Default Thread stack size [bytes] <64-4096:8><#/4>
  62:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines default stack size for threads with osThreadDef stacksz = 0
  63:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 200
  64:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_STKSIZE
  65:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_STKSIZE     50
  66:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
  67:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  68:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Main Thread stack size [bytes] <64-32768:8><#/4>
  69:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines stack size for main thread.
  70:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 200
  71:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_MAINSTKSIZE
  72:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_MAINSTKSIZE 0
  73:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
  74:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  75:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Number of threads with user-provided stack size <0-250>
  76:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines the number of threads with user-provided stack size.
  77:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 0
  78:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_PRIVCNT
  79:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_PRIVCNT     0
  80:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
  81:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  82:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Total stack size [bytes] for threads with user-provided stack size <0-1048576:8><#/4>
  83:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines the combined stack size for threads with user-provided stack size.
  84:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 0
  85:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_PRIVSTKSIZE
  86:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_PRIVSTKSIZE 0
  87:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
  88:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  89:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <q>Check for stack overflow
  90:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Includes the stack checking code for stack overflow.
  91:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Note that additional code reduces the Kernel performance.
  92:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_STKCHECK
  93:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_STKCHECK    1
  94:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
  95:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
  96:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Processor mode for thread execution 
  97:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //     <0=> Unprivileged mode 
  98:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //     <1=> Privileged mode
  99:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: Privileged mode
 100:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_RUNPRIV
 101:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_RUNPRIV     1
 102:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 103:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 104:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // </h>
 105:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 106:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // <h>RTX Kernel Timer Tick Configuration
 107:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // ======================================
 108:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <q> Use Cortex-M SysTick timer as RTX Kernel Timer
 109:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Cortex-M processors provide in most cases a SysTick timer that can be used as 
 110:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> as time-base for RTX.
 111:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_SYSTICK
 112:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_SYSTICK     1
 113:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 114:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //
 115:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>RTOS Kernel Timer input clock frequency [Hz] <1-1000000000>
 116:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines the input frequency of the RTOS Kernel Timer.  
 117:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> When the Cortex-M SysTick timer is used, the input clock 
 118:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> is on most systems identical with the core clock.
 119:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_CLOCK
 120:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_CLOCK       120000000
 121:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 122:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 123:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>RTX Timer tick interval value [us] <1-1000000>
 124:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> The RTX Timer tick interval value is used to calculate timeout values.
 125:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> When the Cortex-M SysTick timer is enabled, the value also configures the SysTick timer.
 126:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 1000  (1ms)
 127:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_TICK
 128:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_TICK        1000
 129:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 130:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 131:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // </h>
 132:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 133:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // <h>System Configuration
 134:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // =======================
 135:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //
 136:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // <e>Round-Robin Thread switching
 137:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // ===============================
 138:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //
 139:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // <i> Enables Round-Robin Thread switching.
 140:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_ROBIN
 141:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_ROBIN       1
 142:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 143:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 144:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Round-Robin Timeout [ticks] <1-1000>
 145:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines how long a thread will execute before a thread switch.
 146:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 5
 147:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_ROBINTOUT
 148:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_ROBINTOUT   5
 149:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 150:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 151:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // </e>
 152:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 153:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // <e>User Timers
 154:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // ==============
 155:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Enables user Timers
 156:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_TIMERS
 157:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_TIMERS      0
 158:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 159:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 160:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Timer Thread Priority
 161:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                        <1=> Low
 162:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //     <2=> Below Normal  <3=> Normal  <4=> Above Normal
 163:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                        <5=> High
 164:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                        <6=> Realtime (highest)
 165:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines priority for Timer Thread
 166:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: High
 167:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_TIMERPRIO
 168:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_TIMERPRIO   5
 169:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 170:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 171:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Timer Thread stack size [bytes] <64-4096:8><#/4>
 172:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Defines stack size for Timer thread.
 173:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 200
 174:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_TIMERSTKSZ
 175:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_TIMERSTKSZ  50
 176:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 177:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 178:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>Timer Callback Queue size <1-32>
 179:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Number of concurrent active timer callback functions.
 180:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 4
 181:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_TIMERCBQS
 182:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_TIMERCBQS   4
 183:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 184:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 185:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // </e>
 186:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 187:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <o>ISR FIFO Queue size<4=>   4 entries  <8=>   8 entries
 188:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                         <12=> 12 entries  <16=> 16 entries
 189:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                         <24=> 24 entries  <32=> 32 entries
 190:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                         <48=> 48 entries  <64=> 64 entries
 191:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //                         <96=> 96 entries
 192:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> ISR functions store requests to this buffer,
 193:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> when they are called from the interrupt handler.
 194:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //   <i> Default: 16 entries
 195:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_FIFOSZ
 196:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_FIFOSZ      16
 197:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 198:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 199:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // </h>
 200:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 201:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //------------- <<< end of configuration section >>> -----------------------
 202:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 203:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Standard library system mutexes
 204:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // ===============================
 205:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //  Define max. number system mutexes that are used to protect 
 206:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** //  the arm standard runtime library. For microlib they are not used.
 207:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #ifndef OS_MUTEXCNT
 208:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  #define OS_MUTEXCNT    8
 209:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 210:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 211:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*----------------------------------------------------------------------------
 212:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      RTX User configuration part END
 213:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *---------------------------------------------------------------------------*/
 214:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 215:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #define OS_TRV          ((uint32_t)(((double)OS_CLOCK*(double)OS_TICK)/1E6)-1)
 216:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 217:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 218:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*----------------------------------------------------------------------------
 219:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *      Global Functions
 220:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****  *---------------------------------------------------------------------------*/
 221:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 222:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*--------------------------- os_idle_demon ---------------------------------*/
 223:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** void os_idle_demon (void) {
  28              		.loc 1 223 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  40              	.L2:
 224:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   /* The idle demon is a system thread, running when no other thread is      */
 225:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   /* ready to run.                                                           */
 226:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 227:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   for (;;) {
 228:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****     /* HERE: include optional user code to be executed when no thread runs.*/
 229:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   }
  41              		.loc 1 229 0 discriminator 1
  42 0004 FEE7     		b	.L2
  43              		.cfi_endproc
  44              	.LFE0:
  46 0006 00BF     		.section	.text.os_tmr_call,"ax",%progbits
  47              		.align	2
  48              		.global	os_tmr_call
  49              		.thumb
  50              		.thumb_func
  52              	os_tmr_call:
  53              	.LFB1:
 230:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** }
 231:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 232:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #if (OS_TIMERS == 0)
 233:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** void os_tmr_call(uint16_t info) {
  54              		.loc 1 233 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 8
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59 0000 80B4     		push	{r7}
  60              	.LCFI2:
  61              		.cfi_def_cfa_offset 4
  62              		.cfi_offset 7, -4
  63 0002 83B0     		sub	sp, sp, #12
  64              	.LCFI3:
  65              		.cfi_def_cfa_offset 16
  66 0004 00AF     		add	r7, sp, #0
  67              	.LCFI4:
  68              		.cfi_def_cfa_register 7
  69 0006 0346     		mov	r3, r0
  70 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 234:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****    switch (info) {
  71              		.loc 1 234 0
  72 000a FB88     		ldrh	r3, [r7, #6]
  73 000c 012B     		cmp	r3, #1
  74 000e 01D0     		beq	.L7
  75 0010 022B     		cmp	r3, #2
 235:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       case 1:                 /* Signal that first timer has expired.        */
 236:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****                               /* Supervised task is locked, do some actions. */
 237:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****                break;
 238:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       case 2:                 /* Second task is locked. Do some actions.     */
 239:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 240:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****                break;
  76              		.loc 1 240 0
  77 0012 00E0     		b	.L3
  78              	.L7:
 237:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****                break;
  79              		.loc 1 237 0
  80 0014 00BF     		nop
  81              	.L3:
 241:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****    }
 242:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** }
  82              		.loc 1 242 0
  83 0016 07F10C07 		add	r7, r7, #12
  84 001a BD46     		mov	sp, r7
  85 001c 80BC     		pop	{r7}
  86 001e 7047     		bx	lr
  87              		.cfi_endproc
  88              	.LFE1:
  90              		.section	.text.os_error,"ax",%progbits
  91              		.align	2
  92              		.global	os_error
  93              		.thumb
  94              		.thumb_func
  96              	os_error:
  97              	.LFB2:
 243:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif
 244:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 245:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #if (OS_SYSTICK == 0)   // Functions for alternative timer as RTX kernel timer
 246:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 247:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*--------------------------- os_tick_init ----------------------------------*/
 248:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 249:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Initialize alternative hardware timer as RTX kernel timer
 250:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Return: IRQ number of the alternative hardware timer
 251:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** int os_tick_init (void) {
 252:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   return (-1);  /* Return IRQ number of timer (0..239) */
 253:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** }
 254:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 255:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*--------------------------- os_tick_val -----------------------------------*/
 256:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 257:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Get alternative hardware timer current value (0 .. OS_TRV)
 258:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** uint32_t os_tick_val (void) {
 259:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   return (0);
 260:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** }
 261:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 262:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*--------------------------- os_tick_ovf -----------------------------------*/
 263:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 264:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Get alternative hardware timer overflow flag
 265:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Return: 1 - overflow, 0 - no overflow
 266:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** uint32_t os_tick_ovf (void) {
 267:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   return (0);
 268:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** }
 269:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 270:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*--------------------------- os_tick_irqack --------------------------------*/
 271:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 272:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** // Acknowledge alternative hardware timer interrupt
 273:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** void os_tick_irqack (void) {
 274:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   /* ... */
 275:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** }
 276:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 277:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #endif   // (OS_SYSTICK == 0)
 278:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 279:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /*--------------------------- os_error --------------------------------------*/
 280:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 281:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** /* OS Error Codes */
 282:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #define OS_ERROR_STACK_OVF      1
 283:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #define OS_ERROR_FIFO_OVF       2
 284:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** #define OS_ERROR_MBX_OVF        3
 285:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 286:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** extern osThreadId svcThreadGetId (void);
 287:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 288:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** void os_error (uint32_t error_code) {
  98              		.loc 1 288 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 8
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0000 80B4     		push	{r7}
 104              	.LCFI5:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 83B0     		sub	sp, sp, #12
 108              	.LCFI6:
 109              		.cfi_def_cfa_offset 16
 110 0004 00AF     		add	r7, sp, #0
 111              	.LCFI7:
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
 289:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   /* This function is called when a runtime error is detected.  */
 290:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   /* Parameter 'error_code' holds the runtime error code.       */
 291:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c **** 
 292:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   /* HERE: include optional code to be executed on runtime error. */
 293:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   switch (error_code) {
 114              		.loc 1 293 0
 115 0008 7B68     		ldr	r3, [r7, #4]
 116 000a 022B     		cmp	r3, #2
 117 000c 05D0     		beq	.L11
 118 000e 032B     		cmp	r3, #3
 119 0010 04D0     		beq	.L12
 120 0012 012B     		cmp	r3, #1
 121 0014 00D0     		beq	.L10
 122 0016 02E0     		b	.L9
 123              	.L10:
 294:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****     case OS_ERROR_STACK_OVF:
 295:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       /* Stack overflow detected for the currently running task. */
 296:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       /* Thread can be identified by calling svcThreadGetId().   */
 297:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       break;
 124              		.loc 1 297 0
 125 0018 01E0     		b	.L9
 126              	.L11:
 298:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****     case OS_ERROR_FIFO_OVF:
 299:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       /* ISR FIFO Queue buffer overflow detected. */
 300:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       break;
 127              		.loc 1 300 0
 128 001a 00E0     		b	.L9
 129              	.L12:
 301:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****     case OS_ERROR_MBX_OVF:
 302:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       /* Mailbox overflow detected. */
 303:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****       break;
 130              		.loc 1 303 0
 131 001c 00BF     		nop
 132              	.L9:
 304:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   }
 305:../Dave/Generated/src/RTOS001/RTX_Conf_CM.c ****   for (;;);
 133              		.loc 1 305 0 discriminator 1
 134 001e FEE7     		b	.L9
 135              		.cfi_endproc
 136              	.LFE2:
 138              		.global	os_maxtaskrun
 139              		.section	.rodata
 140              		.align	1
 143              	os_maxtaskrun:
 144 0000 0700     		.short	7
 145              		.global	os_stackinfo
 146 0002 0000     		.align	2
 149              	os_stackinfo:
 150 0004 C8000101 		.word	16842952
 151              		.global	os_rrobin
 152              		.align	2
 155              	os_rrobin:
 156 0008 05000100 		.word	65541
 157              		.global	os_tickfreq
 158              		.align	2
 161              	os_tickfreq:
 162 000c 000E2707 		.word	120000000
 163              		.global	os_tickus_i
 164              		.align	1
 167              	os_tickus_i:
 168 0010 7800     		.short	120
 169              		.global	os_tickus_f
 170              		.align	1
 173              	os_tickus_f:
 174 0012 0000     		.space	2
 175              		.global	os_trv
 176              		.align	2
 179              	os_trv:
 180 0014 BFD40100 		.word	119999
 181              		.global	os_flags
 184              	os_flags:
 185 0018 01       		.byte	1
 186              		.global	CMSIS_RTOS_API_Version
 187 0019 000000   		.align	2
 190              	CMSIS_RTOS_API_Version:
 191 001c 02000100 		.word	65538
 192              		.global	CMSIS_RTOS_RTX_Version
 193              		.align	2
 196              	CMSIS_RTOS_RTX_Version:
 197 0020 4A000400 		.word	262218
 198              		.global	os_clockrate
 199              		.align	2
 202              	os_clockrate:
 203 0024 E8030000 		.word	1000
 204              		.global	os_timernum
 205              		.align	2
 208              	os_timernum:
 209 0028 00000000 		.space	4
 210              		.comm	mp_tcb,376,4
 211              		.global	mp_tcb_size
 212              		.align	1
 215              	mp_tcb_size:
 216 002c 7801     		.short	376
 217              		.comm	mp_stk,1416,8
 218              		.global	mp_stk_size
 219 002e 0000     		.align	2
 222              	mp_stk_size:
 223 0030 88050000 		.word	1416
 224              		.comm	os_stack_mem,24,8
 225              		.global	os_stack_sz
 226              		.align	2
 229              	os_stack_sz:
 230 0034 18000000 		.word	24
 231              		.comm	os_fifo,132,4
 232              		.global	os_fifo_size
 235              	os_fifo_size:
 236 0038 10       		.byte	16
 237              		.comm	os_active_TCB,28,4
 238              		.global	os_thread_def_osTimerThread
 239              		.bss
 240              		.align	2
 243              	os_thread_def_osTimerThread:
 244 0000 00000000 		.space	16
 244      00000000 
 244      00000000 
 244      00000000 
 245              		.comm	osThreadId_osTimerThread,4,4
 246              		.global	os_messageQ_q_osTimerMessageQ
 247              		.align	2
 250              	os_messageQ_q_osTimerMessageQ:
 251 0010 00000000 		.space	16
 251      00000000 
 251      00000000 
 251      00000000 
 252              		.global	os_messageQ_def_osTimerMessageQ
 253              		.section	.rodata
 254 0039 000000   		.align	2
 257              	os_messageQ_def_osTimerMessageQ:
 258 003c 00000000 		.word	0
 259 0040 00000000 		.word	os_messageQ_q_osTimerMessageQ
 260              		.comm	osMessageQId_osTimerMessageQ,4,4
 261              		.global	m_tmr
 262              		.bss
 263              		.align	2
 266              	m_tmr:
 267 0020 00000000 		.space	4
 268              		.global	mp_tmr_size
 269              		.section	.rodata
 270              		.align	1
 273              	mp_tmr_size:
 274 0044 0000     		.space	2
 275 0046 0000     		.text
 276              	.Letext0:
 277              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 278              		.file 3 "../Dave/Generated/src/RTOS001/INC/cmsis_os.h"
 279              		.file 4 "../Dave/Generated/src/RTOS001/INC/RTX_CM_lib.h"
DEFINED SYMBOLS
                            *ABS*:00000000 RTX_Conf_CM.c
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:20     .text.os_idle_demon:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:25     .text.os_idle_demon:00000000 os_idle_demon
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:47     .text.os_tmr_call:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:52     .text.os_tmr_call:00000000 os_tmr_call
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:91     .text.os_error:00000000 $t
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:96     .text.os_error:00000000 os_error
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:143    .rodata:00000000 os_maxtaskrun
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:140    .rodata:00000000 $d
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:149    .rodata:00000004 os_stackinfo
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:155    .rodata:00000008 os_rrobin
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:161    .rodata:0000000c os_tickfreq
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:167    .rodata:00000010 os_tickus_i
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:173    .rodata:00000012 os_tickus_f
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:179    .rodata:00000014 os_trv
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:184    .rodata:00000018 os_flags
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:190    .rodata:0000001c CMSIS_RTOS_API_Version
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:196    .rodata:00000020 CMSIS_RTOS_RTX_Version
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:202    .rodata:00000024 os_clockrate
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:208    .rodata:00000028 os_timernum
                            *COM*:00000178 mp_tcb
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:215    .rodata:0000002c mp_tcb_size
                            *COM*:00000588 mp_stk
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:222    .rodata:00000030 mp_stk_size
                            *COM*:00000018 os_stack_mem
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:229    .rodata:00000034 os_stack_sz
                            *COM*:00000084 os_fifo
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:235    .rodata:00000038 os_fifo_size
                            *COM*:0000001c os_active_TCB
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:243    .bss:00000000 os_thread_def_osTimerThread
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:240    .bss:00000000 $d
                            *COM*:00000004 osThreadId_osTimerThread
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:250    .bss:00000010 os_messageQ_q_osTimerMessageQ
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:257    .rodata:0000003c os_messageQ_def_osTimerMessageQ
                            *COM*:00000004 osMessageQId_osTimerMessageQ
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:266    .bss:00000020 m_tmr
C:\Users\LIUDAN~1\AppData\Local\Temp\cc3XlBTz.s:273    .rodata:00000044 mp_tmr_size
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.35166846b5321d4273ad8c4248893ac3
                           .group:00000000 wm4.cmsis_os.h.131.c9c34dc8297264a3e18c36fd1cd4383c
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.cmsis_os.h.185.c5bf6edc2212781bbc023e70c59eddda
                           .group:00000000 wm4.RTX_CM_lib.h.40.b1a448da9c23675c432498ca09cae138

NO UNDEFINED SYMBOLS
